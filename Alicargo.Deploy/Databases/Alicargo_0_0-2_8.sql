/*
Deployment script for Alicargo

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Alicargo"
:setvar DefaultFilePrefix "Alicargo"
:setvar DefaultDataPath "A:\Program Files\Microsoft SQL Server\MSSQL10_50.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "A:\Program Files\Microsoft SQL Server\MSSQL10_50.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Cyrillic_General_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
USE [master]
GO

SET ANSI_NULLS ON 
GO

SET QUOTED_IDENTIFIER ON 
GO


IF NOT OBJECT_ID('master.dbo.sp_BackupDatabase') IS NULL
	DROP PROCEDURE [dbo].[sp_BackupDatabase]
GO

CREATE PROCEDURE [dbo].[sp_BackupDatabase]
	@databaseName SYSNAME,
	@backupLocation NVARCHAR(200) 
AS BEGIN
	SET NOCOUNT ON;

	DECLARE @dateTime NVARCHAR(20) = REPLACE(CONVERT(VARCHAR, GETDATE(),101),'/','') + '_' +  REPLACE(CONVERT(VARCHAR, GETDATE(),108),':','')
	DECLARE @BackupName VARCHAR(100) =  REPLACE(REPLACE(@databaseName,'[',''),']','') +' full backup for '+ @dateTime
	DECLARE @BackupFile VARCHAR(100) = @backupLocation + REPLACE(REPLACE(@databaseName, '[',''),']','') + '_' + @dateTime + '.bak'

	DECLARE @sqlCommand NVARCHAR(1000) = 'BACKUP DATABASE ' + @databaseName
											+ ' TO DISK = ''' + @BackupFile + ''' WITH INIT, NAME= '''
											+ @BackupName + ''', SKIP, NOFORMAT'
	EXEC(@sqlCommand)
END
GO

IF NOT OBJECT_ID('master.dbo.sp_RestoreDatabase') IS NULL
	DROP PROCEDURE [dbo].[sp_RestoreDatabase]
GO

CREATE PROCEDURE [dbo].[sp_RestoreDatabase]
	@newDb NVARCHAR(50),
	@oldDb NVARCHAR(50),
	@fromFile NVARCHAR(200),
	@dataFolder NVARCHAR(200)

AS BEGIN
	SET NOCOUNT ON;

	EXEC msdb.dbo.sp_delete_database_backuphistory @database_name = @newDb
	
	EXEC(N'ALTER DATABASE [' + @newDb + N'] SET SINGLE_USER WITH ROLLBACK IMMEDIATE')

	DECLARE @sqlRestoreDb NVARCHAR(1000)
		= N'RESTORE DATABASE ' + @newDb + N' FROM '
		+ N'DISK = N''' + @fromFile + N''' WITH FILE = 1, '
		+ N'MOVE N''' + @oldDb + N''' TO N''' + @dataFolder +  @newDb + N'.mdf'', '
		+ N'MOVE N''' + @oldDb + N'_log'' TO N''' + @dataFolder + @newDb + N'_log.ldf'', '
		+ N'NOUNLOAD, REPLACE, STATS = 5';
	EXEC(@sqlRestoreDb)	

	IF @newDb <> @oldDb BEGIN
		DECLARE @sqlModifyName NVARCHAR(1000)
			= N'ALTER DATABASE ' + @newDb + N' MODIFY FILE (NAME=N'''+ @oldDb + N''', NEWNAME=N''' + @newDb + N''');'
			+ N'ALTER DATABASE ' + @newDb + N' MODIFY FILE (NAME=N'''+ @oldDb + N'_log'', NEWNAME=N''' + @newDb + N'_log'');'

		EXEC(@sqlModifyName)	
	END
END
GO

USE [$(DatabaseName)];
GO

GO
PRINT N'Creating [dbo].[IdsTable]...';


GO
CREATE TYPE [dbo].[IdsTable] AS TABLE (
    [Id] BIGINT NOT NULL);


GO
PRINT N'Creating [dbo].[StringsTable]...';


GO
CREATE TYPE [dbo].[StringsTable] AS TABLE (
    [Value] NVARCHAR (MAX) NULL);


GO
PRINT N'Creating [dbo].[Admin]...';


GO
CREATE TABLE [dbo].[Admin] (
    [Id]     BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserId] BIGINT         NOT NULL,
    [Name]   NVARCHAR (MAX) NOT NULL,
    [Email]  NVARCHAR (320) NOT NULL,
    CONSTRAINT [PK_dbo.Admin] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Admin].[IX_UserId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[Admin]([UserId] ASC);


GO
PRINT N'Creating [dbo].[AirWaybill]...';


GO
CREATE TABLE [dbo].[AirWaybill] (
    [Id]                         BIGINT             IDENTITY (1, 1) NOT NULL,
    [CreationTimestamp]          DATETIMEOFFSET (7) NOT NULL,
    [CreatorUserId]              BIGINT             NOT NULL,
    [IsActive]                   BIT                NOT NULL,
    [ArrivalAirport]             NVARCHAR (MAX)     NOT NULL,
    [DepartureAirport]           NVARCHAR (MAX)     NOT NULL,
    [DateOfDeparture]            DATETIMEOFFSET (7) NOT NULL,
    [DateOfArrival]              DATETIMEOFFSET (7) NOT NULL,
    [GTD]                        NVARCHAR (320)     NULL,
    [Bill]                       NVARCHAR (320)     NOT NULL,
    [BrokerId]                   BIGINT             NULL,
    [SenderUserId]               BIGINT             NULL,
    [StateId]                    BIGINT             NOT NULL,
    [StateChangeTimestamp]       DATETIMEOFFSET (7) NOT NULL,
    [FlightCost]                 MONEY              NULL,
    [CustomCost]                 MONEY              NULL,
    [BrokerCost]                 MONEY              NULL,
    [AdditionalCost]             MONEY              NULL,
    [TotalCostOfSenderForWeight] MONEY              NULL,
    CONSTRAINT [PK_dbo.AirWaybill] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[AirWaybill].[IX_BrokerId]...';


GO
CREATE NONCLUSTERED INDEX [IX_BrokerId]
    ON [dbo].[AirWaybill]([BrokerId] ASC);


GO
PRINT N'Creating [dbo].[AirWaybill].[IX_SenderUserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SenderUserId]
    ON [dbo].[AirWaybill]([SenderUserId] ASC);


GO
PRINT N'Creating [dbo].[Application]...';


GO
CREATE TABLE [dbo].[Application] (
    [Id]                         BIGINT             IDENTITY (1, 1) NOT NULL,
    [CreationTimestamp]          DATETIMEOFFSET (7) NOT NULL,
    [DisplayNumber]              INT                NOT NULL,
    [Invoice]                    NVARCHAR (MAX)     NOT NULL,
    [Characteristic]             NVARCHAR (MAX)     NULL,
    [AddressLoad]                NVARCHAR (MAX)     NULL,
    [WarehouseWorkingTime]       NVARCHAR (MAX)     NULL,
    [TransitReference]           NVARCHAR (MAX)     NULL,
    [Weight]                     REAL               NULL,
    [Count]                      INT                NULL,
    [Volume]                     REAL               NOT NULL,
    [TermsOfDelivery]            NVARCHAR (MAX)     NULL,
    [MethodOfDeliveryId]         INT                NOT NULL,
    [DateOfCargoReceipt]         DATETIMEOFFSET (7) NULL,
    [DateInStock]                DATETIMEOFFSET (7) NULL,
    [ClassId]                    INT                NULL,
    [Certificate]                NVARCHAR (MAX)     NULL,
    [Value]                      MONEY              NOT NULL,
    [CurrencyId]                 INT                NOT NULL,
    [FactoryName]                NVARCHAR (320)     NOT NULL,
    [FactoryPhone]               NVARCHAR (MAX)     NULL,
    [FactoryContact]             NVARCHAR (MAX)     NULL,
    [FactoryEmail]               NVARCHAR (320)     NULL,
    [MarkName]                   NVARCHAR (320)     NOT NULL,
    [StateChangeTimestamp]       DATETIMEOFFSET (7) NOT NULL,
    [StateId]                    BIGINT             NOT NULL,
    [ClientId]                   BIGINT             NOT NULL,
    [TransitId]                  BIGINT             NOT NULL,
    [CountryId]                  BIGINT             NOT NULL,
    [AirWaybillId]               BIGINT             NULL,
    [SenderId]                   BIGINT             NULL,
    [ForwarderId]                BIGINT             NOT NULL,
    [FactureCost]                MONEY              NULL,
    [FactureCostEdited]          MONEY              NULL,
    [FactureCostEx]              MONEY              NULL,
    [FactureCostExEdited]        MONEY              NULL,
    [PickupCost]                 MONEY              NULL,
    [PickupCostEdited]           MONEY              NULL,
    [TransitCost]                MONEY              NULL,
    [TransitCostEdited]          MONEY              NULL,
    [ScotchCostEdited]           MONEY              NULL,
    [TariffPerKg]                MONEY              NULL,
    [SenderRate]                 MONEY              NULL,
    [InsuranceRate]              REAL               NOT NULL,
    [CalculationTotalTariffCost] MONEY              NULL,
    [CalculationProfit]          MONEY              NULL,
    CONSTRAINT [PK_dbo.Application] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Application].[IX_ClientId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ClientId]
    ON [dbo].[Application]([ClientId] ASC);


GO
PRINT N'Creating [dbo].[Application].[IX_StateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StateId]
    ON [dbo].[Application]([StateId] ASC);


GO
PRINT N'Creating [dbo].[Application].[IX_Application_TransitId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Application_TransitId]
    ON [dbo].[Application]([TransitId] ASC);


GO
PRINT N'Creating [dbo].[Application].[IX_AirWaybillId]...';


GO
CREATE NONCLUSTERED INDEX [IX_AirWaybillId]
    ON [dbo].[Application]([AirWaybillId] ASC);


GO
PRINT N'Creating [dbo].[Bill]...';


GO
CREATE TABLE [dbo].[Bill] (
    [Id]                        BIGINT             IDENTITY (1, 1) NOT NULL,
    [ApplicationId]             BIGINT             NOT NULL,
    [SaveDate]                  DATETIMEOFFSET (7) NOT NULL,
    [SendDate]                  DATETIMEOFFSET (7) NULL,
    [Number]                    INT                NOT NULL,
    [Bank]                      NVARCHAR (MAX)     NOT NULL,
    [BIC]                       NVARCHAR (MAX)     NOT NULL,
    [CorrespondentAccount]      NVARCHAR (MAX)     NOT NULL,
    [TIN]                       NVARCHAR (MAX)     NOT NULL,
    [TaxRegistrationReasonCode] NVARCHAR (MAX)     NOT NULL,
    [CurrentAccount]            NVARCHAR (MAX)     NOT NULL,
    [Payee]                     NVARCHAR (MAX)     NOT NULL,
    [Shipper]                   NVARCHAR (MAX)     NOT NULL,
    [Head]                      NVARCHAR (MAX)     NOT NULL,
    [Accountant]                NVARCHAR (MAX)     NOT NULL,
    [HeaderText]                NVARCHAR (MAX)     NOT NULL,
    [Client]                    NVARCHAR (MAX)     NOT NULL,
    [Goods]                     NVARCHAR (MAX)     NOT NULL,
    [Count]                     SMALLINT           NOT NULL,
    [Price]                     MONEY              NOT NULL,
    [VAT]                       MONEY              NOT NULL,
    [EuroToRuble]               MONEY              NOT NULL,
    CONSTRAINT [PK_dbo.Bill] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Bill].[IX_Bill_ApplicationId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Bill_ApplicationId]
    ON [dbo].[Bill]([ApplicationId] ASC);


GO
PRINT N'Creating [dbo].[Broker]...';


GO
CREATE TABLE [dbo].[Broker] (
    [Id]     BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserId] BIGINT         NOT NULL,
    [Name]   NVARCHAR (MAX) NOT NULL,
    [Email]  NVARCHAR (320) NOT NULL,
    CONSTRAINT [PK_dbo.Broker] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Broker].[IX_UserId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[Broker]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Calculation]...';


GO
CREATE TABLE [dbo].[Calculation] (
    [Id]                   BIGINT             IDENTITY (1, 1) NOT NULL,
    [CreationTimestamp]    DATETIMEOFFSET (7) NOT NULL,
    [ClientId]             BIGINT             NOT NULL,
    [ApplicationHistoryId] BIGINT             NOT NULL,
    [AirWaybillDisplay]    NVARCHAR (320)     NOT NULL,
    [ApplicationDisplay]   NVARCHAR (320)     NOT NULL,
    [MarkName]             NVARCHAR (320)     NOT NULL,
    [Weight]               REAL               NOT NULL,
    [TariffPerKg]          MONEY              NOT NULL,
    [ScotchCost]           MONEY              NOT NULL,
    [FactureCost]          MONEY              NOT NULL,
    [TransitCost]          MONEY              NOT NULL,
    [PickupCost]           MONEY              NOT NULL,
    [FactoryName]          NVARCHAR (320)     NOT NULL,
    [ClassId]              INT                NULL,
    [Invoice]              NVARCHAR (MAX)     NOT NULL,
    [Value]                MONEY              NOT NULL,
    [Count]                INT                NULL,
    [FactureCostEx]        MONEY              NOT NULL,
    [InsuranceRate]        REAL               NOT NULL,
    [TotalTariffCost]      MONEY              NULL,
    [Profit]               MONEY              NULL,
    CONSTRAINT [PK_dbo.Calculation] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Calculation].[IX_Calculation_ClientId]...';


GO
CREATE NONCLUSTERED INDEX [IX_Calculation_ClientId]
    ON [dbo].[Calculation]([ClientId] ASC);


GO
PRINT N'Creating [dbo].[Calculation].[IX_Calculation_ApplicationHistoryId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_Calculation_ApplicationHistoryId]
    ON [dbo].[Calculation]([ApplicationHistoryId] ASC);


GO
PRINT N'Creating [dbo].[Carrier]...';


GO
CREATE TABLE [dbo].[Carrier] (
    [Id]      BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]    NVARCHAR (MAX) NOT NULL,
    [UserId]  BIGINT         NOT NULL,
    [Email]   NVARCHAR (320) NOT NULL,
    [Contact] NVARCHAR (MAX) NULL,
    [Address] NVARCHAR (MAX) NULL,
    [Phone]   NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_dbo.Carrier] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Carrier].[IX_UserId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[Carrier]([UserId] ASC);


GO
PRINT N'Creating [dbo].[CarrierCity]...';


GO
CREATE TABLE [dbo].[CarrierCity] (
    [Id]        BIGINT IDENTITY (1, 1) NOT NULL,
    [CarrierId] BIGINT NOT NULL,
    [CityId]    BIGINT NOT NULL,
    CONSTRAINT [PK_dbo.CarrierCity] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[City]...';


GO
CREATE TABLE [dbo].[City] (
    [Id]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name_En]  NVARCHAR (128) NOT NULL,
    [Name_Ru]  NVARCHAR (128) NOT NULL,
    [Position] INT            NOT NULL,
    CONSTRAINT [PK_dbo.City] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Client]...';


GO
CREATE TABLE [dbo].[Client] (
    [Id]             BIGINT             IDENTITY (1, 1) NOT NULL,
    [UserId]         BIGINT             NOT NULL,
    [Emails]         NVARCHAR (MAX)     NOT NULL,
    [Nic]            NVARCHAR (MAX)     NOT NULL,
    [LegalEntity]    NVARCHAR (MAX)     NOT NULL,
    [Contacts]       NVARCHAR (MAX)     NOT NULL,
    [Phone]          NVARCHAR (MAX)     NULL,
    [INN]            NVARCHAR (MAX)     NULL,
    [KPP]            NVARCHAR (MAX)     NULL,
    [OGRN]           NVARCHAR (MAX)     NULL,
    [Bank]           NVARCHAR (MAX)     NULL,
    [BIC]            NVARCHAR (MAX)     NULL,
    [LegalAddress]   NVARCHAR (MAX)     NULL,
    [MailingAddress] NVARCHAR (MAX)     NULL,
    [RS]             NVARCHAR (MAX)     NULL,
    [KS]             NVARCHAR (MAX)     NULL,
    [TransitId]      BIGINT             NOT NULL,
    [Balance]        MONEY              NOT NULL,
    [ContractNumber] NVARCHAR (MAX)     NOT NULL,
    [ContractDate]   DATETIMEOFFSET (7) NOT NULL,
    CONSTRAINT [PK_dbo.Client] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Client].[IX_UserId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[Client]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Client].[IX_TransitId]...';


GO
CREATE NONCLUSTERED INDEX [IX_TransitId]
    ON [dbo].[Client]([TransitId] ASC);


GO
PRINT N'Creating [dbo].[ClientBalanceHistory]...';


GO
CREATE TABLE [dbo].[ClientBalanceHistory] (
    [Id]                BIGINT             IDENTITY (1, 1) NOT NULL,
    [CreationTimestamp] DATETIMEOFFSET (7) NOT NULL,
    [Timestamp]         DATETIMEOFFSET (7) NOT NULL,
    [ClientId]          BIGINT             NOT NULL,
    [EventTypeId]       INT                NOT NULL,
    [Balance]           MONEY              NOT NULL,
    [Money]             MONEY              NOT NULL,
    [Comment]           NVARCHAR (MAX)     NULL,
    [IsCalculation]     BIT                NOT NULL,
    CONSTRAINT [PK_dbo.ClientBalanceHistory] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ClientBalanceHistory].[IX_ClientId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ClientId]
    ON [dbo].[ClientBalanceHistory]([ClientId] ASC);


GO
PRINT N'Creating [dbo].[Country]...';


GO
CREATE TABLE [dbo].[Country] (
    [Id]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name_En]  NVARCHAR (128) NOT NULL,
    [Name_Ru]  NVARCHAR (128) NOT NULL,
    [Position] INT            NOT NULL,
    CONSTRAINT [PK_Country] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EmailMessage]...';


GO
CREATE TABLE [dbo].[EmailMessage] (
    [Id]                BIGINT             IDENTITY (1, 1) NOT NULL,
    [StateId]           INT                NOT NULL,
    [StateIdTimestamp]  DATETIMEOFFSET (7) NOT NULL,
    [CreationTimestamp] DATETIMEOFFSET (7) NOT NULL,
    [PartitionId]       INT                NOT NULL,
    [From]              NVARCHAR (MAX)     NOT NULL,
    [To]                NVARCHAR (MAX)     NOT NULL,
    [CopyTo]            NVARCHAR (MAX)     NULL,
    [Subject]           NVARCHAR (MAX)     NOT NULL,
    [Body]              NVARCHAR (MAX)     NOT NULL,
    [IsBodyHtml]        BIT                NOT NULL,
    [Files]             VARBINARY (MAX)    NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EmailTemplate]...';


GO
CREATE TABLE [dbo].[EmailTemplate] (
    [Id] BIGINT IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_dbo.EmailTemplate] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EmailTemplateLocalization]...';


GO
CREATE TABLE [dbo].[EmailTemplateLocalization] (
    [Id]                       BIGINT         IDENTITY (1, 1) NOT NULL,
    [EmailTemplateId]          BIGINT         NOT NULL,
    [TwoLetterISOLanguageName] CHAR (2)       NOT NULL,
    [Subject]                  NVARCHAR (MAX) NULL,
    [Body]                     NVARCHAR (MAX) NULL,
    [IsBodyHtml]               BIT            NOT NULL,
    CONSTRAINT [PK_dbo.EmailTemplateLocalization] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EmailTemplateLocalization].[IX_EmailTemplateLocalization_EmailTemplateId_TwoLetterISOLanguageName]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_EmailTemplateLocalization_EmailTemplateId_TwoLetterISOLanguageName]
    ON [dbo].[EmailTemplateLocalization]([EmailTemplateId] ASC, [TwoLetterISOLanguageName] ASC);


GO
PRINT N'Creating [dbo].[Event]...';


GO
CREATE TABLE [dbo].[Event] (
    [Id]               BIGINT             IDENTITY (1, 1) NOT NULL,
    [StateId]          INT                NOT NULL,
    [StateIdTimestamp] DATETIMEOFFSET (7) NOT NULL,
    [PartitionId]      INT                NOT NULL,
    [EventTypeId]      INT                NOT NULL,
    [Data]             VARBINARY (MAX)    NULL,
    CONSTRAINT [PK_dbo.Event] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[EventEmailRecipient]...';


GO
CREATE TABLE [dbo].[EventEmailRecipient] (
    [RoleId]      INT NOT NULL,
    [EventTypeId] INT NOT NULL,
    CONSTRAINT [PK_dbo.EventEmailRecipient] PRIMARY KEY CLUSTERED ([RoleId] ASC, [EventTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[EventEmailTemplate]...';


GO
CREATE TABLE [dbo].[EventEmailTemplate] (
    [EventTypeId]     BIGINT NOT NULL,
    [EmailTemplateId] BIGINT NOT NULL,
    [EnableEmailSend] BIT    NOT NULL,
    CONSTRAINT [PK_dbo.EventEmailTemplate] PRIMARY KEY CLUSTERED ([EmailTemplateId] ASC, [EventTypeId] ASC)
);


GO
PRINT N'Creating [dbo].[Forwarder]...';


GO
CREATE TABLE [dbo].[Forwarder] (
    [Id]     BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserId] BIGINT         NOT NULL,
    [Name]   NVARCHAR (MAX) NOT NULL,
    [Email]  NVARCHAR (320) NOT NULL,
    CONSTRAINT [PK_dbo.Forwarder] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Forwarder].[IX_UserId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[Forwarder]([UserId] ASC);


GO
PRINT N'Creating [dbo].[ForwarderCity]...';


GO
CREATE TABLE [dbo].[ForwarderCity] (
    [Id]          BIGINT IDENTITY (1, 1) NOT NULL,
    [ForwarderId] BIGINT NOT NULL,
    [CityId]      BIGINT NOT NULL,
    CONSTRAINT [PK_dbo.ForwarderCity] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Manager]...';


GO
CREATE TABLE [dbo].[Manager] (
    [Id]     BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserId] BIGINT         NOT NULL,
    [Name]   NVARCHAR (MAX) NOT NULL,
    [Email]  NVARCHAR (320) NOT NULL,
    CONSTRAINT [PK_dbo.Manager] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Manager].[IX_UserId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[Manager]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Sender]...';


GO
CREATE TABLE [dbo].[Sender] (
    [Id]                 BIGINT         IDENTITY (1, 1) NOT NULL,
    [UserId]             BIGINT         NOT NULL,
    [Name]               NVARCHAR (MAX) NOT NULL,
    [Email]              NVARCHAR (320) NOT NULL,
    [TariffOfTapePerBox] MONEY          NOT NULL,
    [Contact]            NVARCHAR (MAX) NULL,
    [Phone]              NVARCHAR (MAX) NULL,
    [Address]            NVARCHAR (MAX) NULL,
    CONSTRAINT [PK_dbo.Sender] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Sender].[IX_UserId]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UserId]
    ON [dbo].[Sender]([UserId] ASC);


GO
PRINT N'Creating [dbo].[SenderCountry]...';


GO
CREATE TABLE [dbo].[SenderCountry] (
    [Id]        BIGINT IDENTITY (1, 1) NOT NULL,
    [SenderId]  BIGINT NOT NULL,
    [CountryId] BIGINT NOT NULL,
    CONSTRAINT [PK_dbo.SenderCountry] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Setting]...';


GO
CREATE TABLE [dbo].[Setting] (
    [Type]       INT             NOT NULL,
    [RowVersion] ROWVERSION      NOT NULL,
    [Data]       VARBINARY (MAX) NOT NULL,
    CONSTRAINT [PK_dbo.Setting] PRIMARY KEY CLUSTERED ([Type] ASC)
);


GO
PRINT N'Creating [dbo].[State]...';


GO
CREATE TABLE [dbo].[State] (
    [Id]       BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]     NVARCHAR (320) NOT NULL,
    [Position] INT            NOT NULL,
    [IsSystem] BIT            NOT NULL,
    CONSTRAINT [PK_dbo.State] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StateAvailability]...';


GO
CREATE TABLE [dbo].[StateAvailability] (
    [RoleId]  INT    NOT NULL,
    [StateId] BIGINT NOT NULL,
    CONSTRAINT [PK_dbo.StateAvailability] PRIMARY KEY CLUSTERED ([RoleId] ASC, [StateId] ASC)
);


GO
PRINT N'Creating [dbo].[StateAvailability].[IX_StateAvailability_StateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StateAvailability_StateId]
    ON [dbo].[StateAvailability]([StateId] ASC);


GO
PRINT N'Creating [dbo].[StateAvailability].[IX_StateAvailability_RoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StateAvailability_RoleId]
    ON [dbo].[StateAvailability]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[StateLocalization]...';


GO
CREATE TABLE [dbo].[StateLocalization] (
    [Id]                       BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]                     NVARCHAR (320) NOT NULL,
    [TwoLetterISOLanguageName] CHAR (2)       NOT NULL,
    [StateId]                  BIGINT         NOT NULL,
    CONSTRAINT [PK_dbo.StateLocalization] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StateLocalization].[IX_StateLocalization_StateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StateLocalization_StateId]
    ON [dbo].[StateLocalization]([StateId] ASC);


GO
PRINT N'Creating [dbo].[StateVisibility]...';


GO
CREATE TABLE [dbo].[StateVisibility] (
    [RoleId]  INT    NOT NULL,
    [StateId] BIGINT NOT NULL,
    CONSTRAINT [PK_dbo.StateVisibility] PRIMARY KEY CLUSTERED ([RoleId] ASC, [StateId] ASC)
);


GO
PRINT N'Creating [dbo].[StateVisibility].[IX_StateVisibility_StateId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StateVisibility_StateId]
    ON [dbo].[StateVisibility]([StateId] ASC);


GO
PRINT N'Creating [dbo].[StateVisibility].[IX_StateVisibility_RoleId]...';


GO
CREATE NONCLUSTERED INDEX [IX_StateVisibility_RoleId]
    ON [dbo].[StateVisibility]([RoleId] ASC);


GO
PRINT N'Creating [dbo].[Transit]...';


GO
CREATE TABLE [dbo].[Transit] (
    [Id]                   BIGINT         IDENTITY (1, 1) NOT NULL,
    [Address]              NVARCHAR (MAX) NOT NULL,
    [RecipientName]        NVARCHAR (MAX) NOT NULL,
    [Phone]                NVARCHAR (MAX) NOT NULL,
    [WarehouseWorkingTime] NVARCHAR (MAX) NULL,
    [MethodOfTransitId]    INT            NOT NULL,
    [DeliveryTypeId]       INT            NOT NULL,
    [CarrierId]            BIGINT         NOT NULL,
    [CityId]               BIGINT         NOT NULL,
    CONSTRAINT [PK_dbo.Transit] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Transit].[IX_CarrierId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CarrierId]
    ON [dbo].[Transit]([CarrierId] ASC);


GO
PRINT N'Creating [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [Id]                       BIGINT           IDENTITY (1, 1) NOT NULL,
    [Login]                    NVARCHAR (320)   NOT NULL,
    [PasswordHash]             VARBINARY (8000) NOT NULL,
    [PasswordSalt]             VARBINARY (8000) NOT NULL,
    [TwoLetterISOLanguageName] CHAR (2)         NOT NULL,
    CONSTRAINT [PK_dbo.User] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[User].[IX_User_Login]...';


GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_User_Login]
    ON [dbo].[User]([Login] ASC);


GO
PRINT N'Creating DF_AirWaybill_CreationTimestamp...';


GO
ALTER TABLE [dbo].[AirWaybill]
    ADD CONSTRAINT [DF_AirWaybill_CreationTimestamp] DEFAULT (GETUTCDATE()) FOR [CreationTimestamp];


GO
PRINT N'Creating DF_AirWaybill_IsActive...';


GO
ALTER TABLE [dbo].[AirWaybill]
    ADD CONSTRAINT [DF_AirWaybill_IsActive] DEFAULT (1) FOR [IsActive];


GO
PRINT N'Creating DF_AirWaybill_StateChangeTimestamp...';


GO
ALTER TABLE [dbo].[AirWaybill]
    ADD CONSTRAINT [DF_AirWaybill_StateChangeTimestamp] DEFAULT (GETUTCDATE()) FOR [StateChangeTimestamp];


GO
PRINT N'Creating DF_Application_CreationTimestamp...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_CreationTimestamp] DEFAULT (GETUTCDATE()) FOR [CreationTimestamp];


GO
PRINT N'Creating DF_Application_InsuranceRate...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [DF_Application_InsuranceRate] DEFAULT 0.01 FOR [InsuranceRate];


GO
PRINT N'Creating DF_Calculation_InsuranceRate...';


GO
ALTER TABLE [dbo].[Calculation]
    ADD CONSTRAINT [DF_Calculation_InsuranceRate] DEFAULT 0.01 FOR [InsuranceRate];


GO
PRINT N'Creating DF_Client_Balance...';


GO
ALTER TABLE [dbo].[Client]
    ADD CONSTRAINT [DF_Client_Balance] DEFAULT ((0)) FOR [Balance];


GO
PRINT N'Creating DF_ClientBalanceHistory_CreationTimestamp...';


GO
ALTER TABLE [dbo].[ClientBalanceHistory]
    ADD CONSTRAINT [DF_ClientBalanceHistory_CreationTimestamp] DEFAULT (GETUTCDATE()) FOR [CreationTimestamp];


GO
PRINT N'Creating DF_EmailMessage_StateIdTimestamp...';


GO
ALTER TABLE [dbo].[EmailMessage]
    ADD CONSTRAINT [DF_EmailMessage_StateIdTimestamp] DEFAULT (GETUTCDATE()) FOR [StateIdTimestamp];


GO
PRINT N'Creating DF_EmailMessage_CreationTimestamp...';


GO
ALTER TABLE [dbo].[EmailMessage]
    ADD CONSTRAINT [DF_EmailMessage_CreationTimestamp] DEFAULT (GETUTCDATE()) FOR [CreationTimestamp];


GO
PRINT N'Creating DF_EmailMessage_IsBodyHtml...';


GO
ALTER TABLE [dbo].[EmailMessage]
    ADD CONSTRAINT [DF_EmailMessage_IsBodyHtml] DEFAULT (0) FOR [IsBodyHtml];


GO
PRINT N'Creating DF_EmailTemplateLocalization_IsBodyHtml...';


GO
ALTER TABLE [dbo].[EmailTemplateLocalization]
    ADD CONSTRAINT [DF_EmailTemplateLocalization_IsBodyHtml] DEFAULT (0) FOR [IsBodyHtml];


GO
PRINT N'Creating DF_Event_StateIdTimestamp...';


GO
ALTER TABLE [dbo].[Event]
    ADD CONSTRAINT [DF_Event_StateIdTimestamp] DEFAULT (GETUTCDATE()) FOR [StateIdTimestamp];


GO
PRINT N'Creating DF_EventEmailTemplate_EnableEmailSend...';


GO
ALTER TABLE [dbo].[EventEmailTemplate]
    ADD CONSTRAINT [DF_EventEmailTemplate_EnableEmailSend] DEFAULT 1 FOR [EnableEmailSend];


GO
PRINT N'Creating DF_Sender_TariffOfTapePerBox...';


GO
ALTER TABLE [dbo].[Sender]
    ADD CONSTRAINT [DF_Sender_TariffOfTapePerBox] DEFAULT (4) FOR [TariffOfTapePerBox];


GO
PRINT N'Creating DF_User_TwoLetterISOLanguageName...';


GO
ALTER TABLE [dbo].[User]
    ADD CONSTRAINT [DF_User_TwoLetterISOLanguageName] DEFAULT 'en' FOR [TwoLetterISOLanguageName];


GO
PRINT N'Creating [dbo].[DisplayNumberCounter]...';


GO
CREATE SEQUENCE [dbo].[DisplayNumberCounter]
    AS INT
    START WITH 1
    INCREMENT BY 1
    MINVALUE 0
    NO CACHE;


GO
PRINT N'Creating FK_dbo.Admin_dbo.User_UserId...';


GO
ALTER TABLE [dbo].[Admin]
    ADD CONSTRAINT [FK_dbo.Admin_dbo.User_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.AirWaybill_dbo.Broker_BrokerId...';


GO
ALTER TABLE [dbo].[AirWaybill]
    ADD CONSTRAINT [FK_dbo.AirWaybill_dbo.Broker_BrokerId] FOREIGN KEY ([BrokerId]) REFERENCES [dbo].[Broker] ([Id]);


GO
PRINT N'Creating FK_dbo.AirWaybill_dbo.State_StateId...';


GO
ALTER TABLE [dbo].[AirWaybill]
    ADD CONSTRAINT [FK_dbo.AirWaybill_dbo.State_StateId] FOREIGN KEY ([StateId]) REFERENCES [dbo].[State] ([Id]);


GO
PRINT N'Creating FK_dbo.AirWaybill_dbo.User_CreatorUserId...';


GO
ALTER TABLE [dbo].[AirWaybill]
    ADD CONSTRAINT [FK_dbo.AirWaybill_dbo.User_CreatorUserId] FOREIGN KEY ([CreatorUserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating FK_dbo.AirWaybill_dbo.User_SenderUserId...';


GO
ALTER TABLE [dbo].[AirWaybill]
    ADD CONSTRAINT [FK_dbo.AirWaybill_dbo.User_SenderUserId] FOREIGN KEY ([SenderUserId]) REFERENCES [dbo].[User] ([Id]);


GO
PRINT N'Creating FK_dbo.Application_dbo.Client_ClientId...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [FK_dbo.Application_dbo.Client_ClientId] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Client] ([Id]);


GO
PRINT N'Creating FK_dbo.Application_dbo.Sender_SenderId...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [FK_dbo.Application_dbo.Sender_SenderId] FOREIGN KEY ([SenderId]) REFERENCES [dbo].[Sender] ([Id]);


GO
PRINT N'Creating FK_dbo.Application_dbo.Forwarder_ForwarderId...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [FK_dbo.Application_dbo.Forwarder_ForwarderId] FOREIGN KEY ([ForwarderId]) REFERENCES [dbo].[Forwarder] ([Id]);


GO
PRINT N'Creating FK_dbo.Application_dbo.AirWaybill_AirWaybillId...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [FK_dbo.Application_dbo.AirWaybill_AirWaybillId] FOREIGN KEY ([AirWaybillId]) REFERENCES [dbo].[AirWaybill] ([Id]);


GO
PRINT N'Creating FK_dbo.Application_dbo.State_StateId...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [FK_dbo.Application_dbo.State_StateId] FOREIGN KEY ([StateId]) REFERENCES [dbo].[State] ([Id]);


GO
PRINT N'Creating FK_dbo.Application_dbo.Transit_TransitId...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [FK_dbo.Application_dbo.Transit_TransitId] FOREIGN KEY ([TransitId]) REFERENCES [dbo].[Transit] ([Id]);


GO
PRINT N'Creating FK_dbo.Application_dbo.Country_CountryId...';


GO
ALTER TABLE [dbo].[Application]
    ADD CONSTRAINT [FK_dbo.Application_dbo.Country_CountryId] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([Id]);


GO
PRINT N'Creating FK_dbo.Broker_dbo.User_UserId...';


GO
ALTER TABLE [dbo].[Broker]
    ADD CONSTRAINT [FK_dbo.Broker_dbo.User_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_Calculation_Client...';


GO
ALTER TABLE [dbo].[Calculation]
    ADD CONSTRAINT [FK_Calculation_Client] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Client] ([Id]);


GO
PRINT N'Creating FK_dbo.Carrier_dbo.User_UserId...';


GO
ALTER TABLE [dbo].[Carrier]
    ADD CONSTRAINT [FK_dbo.Carrier_dbo.User_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.CarrierCity_dbo.Carrier_CarrierId...';


GO
ALTER TABLE [dbo].[CarrierCity]
    ADD CONSTRAINT [FK_dbo.CarrierCity_dbo.Carrier_CarrierId] FOREIGN KEY ([CarrierId]) REFERENCES [dbo].[Carrier] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.CarrierCity_dbo.City_CityId...';


GO
ALTER TABLE [dbo].[CarrierCity]
    ADD CONSTRAINT [FK_dbo.CarrierCity_dbo.City_CityId] FOREIGN KEY ([CityId]) REFERENCES [dbo].[City] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.Client_dbo.Transit_TransitId...';


GO
ALTER TABLE [dbo].[Client]
    ADD CONSTRAINT [FK_dbo.Client_dbo.Transit_TransitId] FOREIGN KEY ([TransitId]) REFERENCES [dbo].[Transit] ([Id]);


GO
PRINT N'Creating FK_dbo.Client_dbo.User_UserId...';


GO
ALTER TABLE [dbo].[Client]
    ADD CONSTRAINT [FK_dbo.Client_dbo.User_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.ClientBalanceHistory_dbo.Client_ClientId...';


GO
ALTER TABLE [dbo].[ClientBalanceHistory]
    ADD CONSTRAINT [FK_dbo.ClientBalanceHistory_dbo.Client_ClientId] FOREIGN KEY ([ClientId]) REFERENCES [dbo].[Client] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.EmailTemplateLocalization_dbo.EmailTemplate_EmailTemplateId...';


GO
ALTER TABLE [dbo].[EmailTemplateLocalization]
    ADD CONSTRAINT [FK_dbo.EmailTemplateLocalization_dbo.EmailTemplate_EmailTemplateId] FOREIGN KEY ([EmailTemplateId]) REFERENCES [dbo].[EmailTemplate] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.EventEmailTemplate_dbo.EmailTemplate_EmailTemplateId...';


GO
ALTER TABLE [dbo].[EventEmailTemplate]
    ADD CONSTRAINT [FK_dbo.EventEmailTemplate_dbo.EmailTemplate_EmailTemplateId] FOREIGN KEY ([EmailTemplateId]) REFERENCES [dbo].[EmailTemplate] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.Forwarder_dbo.User_UserId...';


GO
ALTER TABLE [dbo].[Forwarder]
    ADD CONSTRAINT [FK_dbo.Forwarder_dbo.User_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.ForwarderCity_dbo.Forwarder_ForwarderId...';


GO
ALTER TABLE [dbo].[ForwarderCity]
    ADD CONSTRAINT [FK_dbo.ForwarderCity_dbo.Forwarder_ForwarderId] FOREIGN KEY ([ForwarderId]) REFERENCES [dbo].[Forwarder] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.ForwarderCity_dbo.City_CityId...';


GO
ALTER TABLE [dbo].[ForwarderCity]
    ADD CONSTRAINT [FK_dbo.ForwarderCity_dbo.City_CityId] FOREIGN KEY ([CityId]) REFERENCES [dbo].[City] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.Manager_dbo.User_UserId...';


GO
ALTER TABLE [dbo].[Manager]
    ADD CONSTRAINT [FK_dbo.Manager_dbo.User_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.Sender_dbo.User_UserId...';


GO
ALTER TABLE [dbo].[Sender]
    ADD CONSTRAINT [FK_dbo.Sender_dbo.User_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.SenderCountry_dbo.Sender_SenderId...';


GO
ALTER TABLE [dbo].[SenderCountry]
    ADD CONSTRAINT [FK_dbo.SenderCountry_dbo.Sender_SenderId] FOREIGN KEY ([SenderId]) REFERENCES [dbo].[Sender] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.SenderCountry_dbo.Country_CountryId...';


GO
ALTER TABLE [dbo].[SenderCountry]
    ADD CONSTRAINT [FK_dbo.SenderCountry_dbo.Country_CountryId] FOREIGN KEY ([CountryId]) REFERENCES [dbo].[Country] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.StateAvailability_dbo.State_StateId...';


GO
ALTER TABLE [dbo].[StateAvailability]
    ADD CONSTRAINT [FK_dbo.StateAvailability_dbo.State_StateId] FOREIGN KEY ([StateId]) REFERENCES [dbo].[State] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.StateLocalization_dbo.State_StateId...';


GO
ALTER TABLE [dbo].[StateLocalization]
    ADD CONSTRAINT [FK_dbo.StateLocalization_dbo.State_StateId] FOREIGN KEY ([StateId]) REFERENCES [dbo].[State] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.StateVisibility_dbo.State_StateId...';


GO
ALTER TABLE [dbo].[StateVisibility]
    ADD CONSTRAINT [FK_dbo.StateVisibility_dbo.State_StateId] FOREIGN KEY ([StateId]) REFERENCES [dbo].[State] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.Transit_dbo.Carrier_CarrierId...';


GO
ALTER TABLE [dbo].[Transit]
    ADD CONSTRAINT [FK_dbo.Transit_dbo.Carrier_CarrierId] FOREIGN KEY ([CarrierId]) REFERENCES [dbo].[Carrier] ([Id]);


GO
PRINT N'Creating FK_dbo.Transit_dbo.City_CityId...';


GO
ALTER TABLE [dbo].[Transit]
    ADD CONSTRAINT [FK_dbo.Transit_dbo.City_CityId] FOREIGN KEY ([CityId]) REFERENCES [dbo].[City] ([Id]);


GO
PRINT N'Creating [dbo].[Bill_AddOrReplace]...';


GO
CREATE PROCEDURE [dbo].[Bill_AddOrReplace]
	@ApplicationId BIGINT,
	@Number INT,
	@Bank NVARCHAR(MAX),
	@BIC NVARCHAR(MAX),
	@CorrespondentAccount NVARCHAR(MAX),
	@TIN NVARCHAR(MAX),
	@TaxRegistrationReasonCode NVARCHAR(MAX),
	@CurrentAccount NVARCHAR(MAX),
	@Payee NVARCHAR(MAX),
	@Shipper NVARCHAR(MAX),
	@Head NVARCHAR(MAX),
	@Accountant NVARCHAR(MAX),
	@HeaderText NVARCHAR(MAX),
	@Client NVARCHAR(MAX),
	@Goods NVARCHAR(MAX),
	@Count SMALLINT,
	@Price MONEY,
	@VAT MONEY,
	@EuroToRuble MONEY,
	@SaveDate DATETIMEOFFSET,
	@SendDate DATETIMEOFFSET

AS BEGIN
	SET NOCOUNT ON;

	MERGE [dbo].[Bill] AS target
		USING (SELECT @ApplicationId,
					@Number,
					@Bank,
					@BIC,
					@CorrespondentAccount,
					@TIN,
					@TaxRegistrationReasonCode,
					@CurrentAccount,
					@Payee,
					@Shipper,
					@Head,
					@Accountant,
					@HeaderText,
					@Client,
					@Goods,
					@Count,
					@Price,
					@VAT,
					@EuroToRuble,
					@SaveDate,
					@SendDate)
			AS source ([ApplicationId],
					[Number],
					[Bank],
					[BIC],
					[CorrespondentAccount],
					[TIN],
					[TaxRegistrationReasonCode],
					[CurrentAccount],
					[Payee],
					[Shipper],
					[Head],
					[Accountant],
					[HeaderText],
					[Client],
					[Goods],
					[Count],
					[Price],
					[VAT],
					[EuroToRuble],
					[SaveDate],
					[SendDate])
			ON (target.[ApplicationId] = source.[ApplicationId])
		WHEN MATCHED THEN 
			UPDATE SET [Bank] = source.[Bank],
						[Number] = source.[Number],
						[BIC] = source.[BIC],
						[CorrespondentAccount] = source.[CorrespondentAccount],
						[TIN] = source.[TIN],
						[TaxRegistrationReasonCode] = source.[TaxRegistrationReasonCode],
						[CurrentAccount] = source.[CurrentAccount],
						[Payee] = source.[Payee],
						[Shipper] = source.[Shipper],
						[Head] = source.[Head],
						[Accountant] = source.[Accountant],
						[HeaderText] = source.[HeaderText],
						[Client] = source.[Client],
						[Goods] = source.[Goods],
						[Count] = source.[Count],
						[Price] = source.[Price],
						[VAT] = source.[VAT],
						[EuroToRuble] = source.[EuroToRuble],
						[SaveDate] = source.[SaveDate],
						[SendDate] = source.[SendDate]
		WHEN NOT MATCHED THEN
			INSERT ([ApplicationId],
					[Number],
					[Bank],
					[BIC],
					[CorrespondentAccount],
					[TIN],
					[TaxRegistrationReasonCode],
					[CurrentAccount],
					[Payee],
					[Shipper],
					[Head],
					[Accountant],
					[HeaderText],
					[Client],
					[Goods],
					[Count],
					[Price],
					[VAT],
					[EuroToRuble],
					[SaveDate],
					[SendDate])
			VALUES (source.[ApplicationId],
					source.[Number],
					source.[Bank],
					source.[BIC],
					source.[CorrespondentAccount],
					source.[TIN],
					source.[TaxRegistrationReasonCode],
					source.[CurrentAccount],
					source.[Payee],
					source.[Shipper],
					source.[Head],
					source.[Accountant],
					source.[HeaderText],
					source.[Client],
					source.[Goods],
					source.[Count],
					source.[Price],
					source.[VAT],
					source.[EuroToRuble],
					source.[SaveDate],
					source.[SendDate])
		OUTPUT INSERTED.[Id];
END
GO
PRINT N'Creating [dbo].[Bill_GetByApplicationId]...';


GO
CREATE PROCEDURE [dbo].[Bill_GetByApplicationId]
	@ApplicationId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT TOP 1
		[Bank],
		[BIC],
		[CorrespondentAccount],
		[TIN],
		[TaxRegistrationReasonCode],
		[CurrentAccount],
		[Payee],
		[Shipper],
		[Head],
		[Accountant],
		[HeaderText],
		[Client],
		[Goods],
		[Count],
		[Price],
		[VAT],
		[EuroToRuble],
		[Number],
		[SaveDate],
		[SendDate]
	FROM [dbo].[Bill]
	WHERE [ApplicationId] = @ApplicationId

END
GO
PRINT N'Creating [dbo].[Calculation_Add]...';


GO
CREATE PROCEDURE [dbo].[Calculation_Add]
	@ClientId BIGINT,
	@ApplicationHistoryId BIGINT,
	@AirWaybillDisplay NVARCHAR(320),
	@ApplicationDisplay NVARCHAR(320),
	@MarkName NVARCHAR(320),
	@Weight REAL,
	@TariffPerKg MONEY,
	@ScotchCost MONEY,
	@InsuranceRate REAL,
	@FactureCost MONEY,
	@FactureCostEx MONEY,
	@TransitCost MONEY,
	@PickupCost MONEY,
	@FactoryName NVARCHAR(320),
	@CreationTimestamp DATETIMEOFFSET,
	@ClassId INT,
	@Invoice NVARCHAR(MAX),
	@Value MONEY,
	@Count INT,
	@TotalTariffCost MONEY,
	@Profit MONEY

AS BEGIN
	SET NOCOUNT ON;

	INSERT	[dbo].[Calculation]
			([ClientId]
			,[ApplicationHistoryId]
			,[AirWaybillDisplay]
			,[ApplicationDisplay]
			,[MarkName]
			,[Weight]
			,[TariffPerKg]
			,[ScotchCost]
			,[FactureCost]
			,[FactureCostEx]
			,[TransitCost]
			,[PickupCost]
			,[FactoryName]
			,[CreationTimestamp]
			,[ClassId]
			,[Invoice]
			,[Value]
			,[Count]
			,[InsuranceRate]
			,[TotalTariffCost]
			,[Profit])
     VALUES	(@ClientId
			,@ApplicationHistoryId
			,@AirWaybillDisplay
			,@ApplicationDisplay
			,@MarkName
			,@Weight
			,@TariffPerKg
			,@ScotchCost
			,@FactureCost
			,@FactureCostEx
			,@TransitCost
			,@PickupCost
			,@FactoryName
			,@CreationTimestamp
			,@ClassId
			,@Invoice
			,@Value
			,@Count
			,@InsuranceRate
			,@TotalTariffCost
			,@Profit)

END
GO
PRINT N'Creating [dbo].[Calculation_GetByApplication]...';


GO
CREATE PROCEDURE [dbo].[Calculation_GetByApplication]
	@ApplicationId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1)
			[ClientId],
			[AirWaybillDisplay],
			[ApplicationDisplay],
			[MarkName],
			[Weight],
			[TariffPerKg],
			[ScotchCost],
			[FactureCost],
			[FactureCostEx],
			[TransitCost],
			[PickupCost],
			[FactoryName],
			[CreationTimestamp],
			[ClassId] AS [Class],
			[Invoice],
			[Value],
			[Count],
			[InsuranceRate],
			[TotalTariffCost],
			[Profit]
	FROM [dbo].[Calculation]
	WHERE [ApplicationHistoryId] = @ApplicationId

END
GO
PRINT N'Creating [dbo].[Calculation_GetByClient]...';


GO
CREATE PROCEDURE [dbo].[Calculation_GetByClient]
	@ClientId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	[ClientId],
			[AirWaybillDisplay],
			[ApplicationDisplay],
			[MarkName],
			[Weight],
			[TariffPerKg],
			[ScotchCost],
			[FactureCost],
			[FactureCostEx],
			[TransitCost],
			[PickupCost],
			[FactoryName],
			[CreationTimestamp],
			[ClassId] AS [Class],
			[Invoice],
			[Value],
			[Count],
			[InsuranceRate],
			[TotalTariffCost],
			[Profit]
	FROM [dbo].[Calculation]
	WHERE [ClientId] = @ClientId

END
GO
PRINT N'Creating [dbo].[Calculation_RemoveByApplication]...';


GO
CREATE PROCEDURE [dbo].[Calculation_RemoveByApplication]
	@ApplicationId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	DELETE TOP(1) [dbo].[Calculation]
    WHERE [ApplicationHistoryId] = @ApplicationId

END
GO
PRINT N'Creating [dbo].[Carrier_Get]...';


GO
CREATE PROCEDURE [dbo].[Carrier_Get]
	@Id BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1) 
			c.[Id],
			u.[Id] AS [UserId],
			c.[Email],
			u.[TwoLetterISOLanguageName] AS [Language],
			u.[Login],
			c.[Name],
			c.[Contact],
			c.[Phone],
			c.[Address]
	FROM	[dbo].[Carrier] c
	JOIN	[dbo].[User] u
	ON		u.[Id] = c.[UserId]
	WHERE	c.[Id] = @Id

END
GO
PRINT N'Creating [dbo].[Carrier_GetAll]...';


GO
CREATE PROCEDURE [dbo].[Carrier_GetAll]

AS BEGIN
	SET NOCOUNT ON;

	SELECT	c.[Id],
			u.[Id] AS [UserId],
			c.[Email],
			u.[TwoLetterISOLanguageName] AS [Language],
			u.[Login],
			c.[Name],
			c.[Contact],
			c.[Phone],
			c.[Address]
	FROM	[dbo].[Carrier] c
	JOIN	[dbo].[User] u
	ON		u.[Id] = c.[UserId]

END
GO
PRINT N'Creating [dbo].[Carrier_GetByCity]...';


GO
CREATE PROCEDURE [dbo].[Carrier_GetByCity]
	@CityId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT s.[CarrierId]
	FROM [dbo].[CarrierCity] s
	WHERE s.[CityId] = @CityId

END
GO
PRINT N'Creating [dbo].[Carrier_GetByUserId]...';


GO
CREATE PROCEDURE [dbo].[Carrier_GetByUserId]
	@UserId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1) [Id]
	FROM	[dbo].[Carrier]
	WHERE	[UserId] = @UserId

END
GO
PRINT N'Creating [dbo].[Carrier_Update]...';


GO
CREATE PROCEDURE [dbo].[Carrier_Update]
	@Id BIGINT,
	@Name NVARCHAR (MAX),
	@Login NVARCHAR(320),
	@Contact NVARCHAR (MAX),
	@Phone NVARCHAR (MAX),
	@Address NVARCHAR (MAX),
	@Email NVARCHAR (320)

AS BEGIN
	SET NOCOUNT ON;

	DECLARE @Table TABLE ([UserId] BIGINT);

	BEGIN TRAN

		UPDATE	TOP(1) [dbo].[Carrier]
		SET		[Name] = @Name,
				[Email] = @Email,
				[Contact] = @Contact,
				[Phone] = @Phone,
				[Address] = @Address
		OUTPUT	INSERTED.[UserId] INTO @Table
		WHERE	[Id] = @Id


		UPDATE	TOP(1) [dbo].[User]
		SET		[Login] = @Login
		WHERE	[Id] IN (SELECT [UserId] FROM @Table);

	COMMIT

END
GO
PRINT N'Creating [dbo].[CarrierCity_Get]...';


GO
CREATE PROCEDURE [dbo].[CarrierCity_Get]
	@CarrierId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT [CityId]
	FROM [dbo].[CarrierCity]
	WHERE [CarrierId] = @CarrierId

END
GO
PRINT N'Creating [dbo].[CarrierCity_Set]...';


GO
CREATE PROCEDURE [dbo].[CarrierCity_Set]
	@CityIds [dbo].[IdsTable] READONLY,
	@CarrierId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRAN

		DELETE [dbo].[CarrierCity]
		WHERE [CarrierId] = @CarrierId
		AND [CityId] NOT IN (SELECT [Id] FROM @CityIds)
		
		INSERT [dbo].[CarrierCity] ([CityId], [CarrierId])
		SELECT [Id] AS [CityId],  @CarrierId AS [CarrierId]
		FROM @CityIds
		WHERE [Id] NOT IN (SELECT [CityId] FROM [CarrierCity] WHERE [CarrierId] = @CarrierId)

	COMMIT

END
GO
PRINT N'Creating [dbo].[City_Add]...';


GO
CREATE PROCEDURE [dbo].[City_Add]
	@EnglishName NVARCHAR(128),
	@RussianName NVARCHAR(128),
	@Position INT
AS
BEGIN
	SET NOCOUNT ON;

	INSERT [dbo].[City] ([Name_En], [Name_Ru], [Position])
	OUTPUT INSERTED.[Id]
	VALUES (@EnglishName, @RussianName, @Position)

END
GO
PRINT N'Creating [dbo].[City_GetList]...';


GO
CREATE PROCEDURE [dbo].[City_GetList]
	@Language CHAR(2)
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT c.[Id], IIF(@Language = 'ru', c.[Name_Ru], c.[Name_En]) AS [Name], c.[Position]
	FROM [dbo].[City] c
	ORDER BY c.[Position], IIF(@Language = 'ru', c.[Name_Ru], c.[Name_En]), c.[Id]

END
GO
PRINT N'Creating [dbo].[City_Update]...';


GO
CREATE PROCEDURE [dbo].[City_Update]
	@EnglishName NVARCHAR(128),
	@RussianName NVARCHAR(128),
	@Position INT,
	@Id BIGINT
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE TOP (1) [dbo].[City]
	SET [Name_En] = @EnglishName,
		[Name_Ru] = @RussianName,
		[Position] = @Position
	WHERE [Id] = @Id

END
GO
PRINT N'Creating [dbo].[Client_Add]...';


GO
CREATE PROCEDURE [dbo].[Client_Add]
	@UserId BIGINT,
    @Emails NVARCHAR(MAX),
    @Nic NVARCHAR(MAX),
    @LegalEntity NVARCHAR(MAX),
    @Contacts NVARCHAR(MAX),
    @Phone NVARCHAR(MAX),
    @INN NVARCHAR(MAX),
    @KPP NVARCHAR(MAX),
    @OGRN NVARCHAR(MAX),
    @Bank NVARCHAR(MAX),
    @BIC NVARCHAR(MAX),
    @LegalAddress NVARCHAR(MAX),
    @MailingAddress NVARCHAR(MAX),
    @RS NVARCHAR(MAX),
    @KS NVARCHAR(MAX),
    @ContractNumber NVARCHAR(MAX),
    @ContractDate DATETIMEOFFSET,
    @TransitId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	INSERT [dbo].[Client]
		([UserId]
		,[Emails]
		,[Nic]
		,[LegalEntity]
		,[Contacts]
		,[Phone]
		,[INN]
		,[KPP]
		,[OGRN]
		,[Bank]
		,[BIC]
		,[LegalAddress]
		,[MailingAddress]
		,[RS]
		,[KS]
		,[TransitId]
		,[ContractNumber]
		,[ContractDate])
	OUTPUT INSERTED.[Id]
	VALUES
		(@UserId,
		@Emails,
		@Nic,
		@LegalEntity,
		@Contacts,
		@Phone,
		@INN,
		@KPP,
		@OGRN,
		@Bank,
		@BIC,
		@LegalAddress,
		@MailingAddress,
		@RS,
		@KS,
		@TransitId,
		@ContractNumber,
		@ContractDate)

END
GO
PRINT N'Creating [dbo].[Client_DeleteForce]...';


GO
CREATE PROCEDURE [dbo].[Client_DeleteForce]
	@ClientId BIGINT
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE	@UserId BIGINT, @TransitId BIGINT;
	SELECT TOP(1) @UserId = c.[UserId], @TransitId = c.[TransitId]
	FROM [dbo].[Client] c
	WHERE c.Id = @ClientId

	BEGIN TRAN
		
		DELETE
		FROM	[dbo].[Application]
		WHERE	[ClientId] = @ClientId

		DELETE	TOP(1)
		FROM	[dbo].[Client]
		WHERE	[Id] = @ClientId

		DELETE	TOP(1)
		FROM	[dbo].[Transit]
		WHERE	[Id] = @TransitId

		DELETE	TOP(1)
		FROM	[dbo].[User]
		WHERE	[Id] = @UserId

	COMMIT
END
GO
PRINT N'Creating [dbo].[Client_Get]...';


GO
CREATE PROCEDURE [dbo].[Client_Get]
	@ClientId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT TOP(1)
		c.[Id] AS [ClientId],
		u.[Id] AS [UserId],
		c.[Emails],
		c.[Nic],
		c.[LegalEntity],
		c.[Contacts],
		c.[Phone],
		c.[INN],
		c.[KPP],
		c.[OGRN],
		c.[Bank],
		c.[BIC],
		c.[LegalAddress],
		c.[MailingAddress],
		c.[RS],
		c.[KS],
		c.[TransitId],
		c.[Balance],
		u.[Login],
		u.[TwoLetterISOLanguageName] AS [Language],
		c.[ContractDate],
		c.[ContractNumber]
	  FROM [dbo].[Client] c
	  JOIN [dbo].[User] u
	  ON c.[UserId] = u.[Id]
	  WHERE c.[Id] = @ClientId

END
GO
PRINT N'Creating [dbo].[Client_GetAll]...';


GO
CREATE PROCEDURE [dbo].[Client_GetAll]

AS BEGIN
	SET NOCOUNT ON;

	SELECT
		c.[Id] AS [ClientId],
		u.[Id] AS [UserId],
		c.[Emails],
		c.[Nic],
		c.[LegalEntity],
		c.[Contacts],
		c.[Phone],
		c.[INN],
		c.[KPP],
		c.[OGRN],
		c.[Bank],
		c.[BIC],
		c.[LegalAddress],
		c.[MailingAddress],
		c.[RS],
		c.[KS],
		c.[TransitId],
		c.[Balance],
		u.[Login],
		u.[TwoLetterISOLanguageName] AS [Language],
		c.[ContractDate],
		c.[ContractNumber]
	  FROM [dbo].[Client] c
	  JOIN [dbo].[User] u
	  ON c.[UserId] = u.[Id]

END
GO
PRINT N'Creating [dbo].[Client_GetBalance]...';


GO
CREATE PROCEDURE [dbo].[Client_GetBalance]
	@ClientId BIGINT
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT TOP(1) c.[Balance]
	FROM [dbo].[Client] c
	WHERE c.[Id] = @ClientId

END
GO
PRINT N'Creating [dbo].[Client_GetByUserId]...';


GO
CREATE PROCEDURE [dbo].[Client_GetByUserId]
	@UserId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT TOP(1)
		c.[Id] AS [ClientId],
		u.[Id] AS [UserId],
		c.[Emails],
		c.[Nic],
		c.[LegalEntity],
		c.[Contacts],
		c.[Phone],
		c.[INN],
		c.[KPP],
		c.[OGRN],
		c.[Bank],
		c.[BIC],
		c.[LegalAddress],
		c.[MailingAddress],
		c.[RS],
		c.[KS],
		c.[TransitId],
		c.[Balance],
		u.[Login],
		u.[TwoLetterISOLanguageName] AS [Language],
		c.[ContractDate],
		c.[ContractNumber]
	  FROM [dbo].[Client] c
	  JOIN [dbo].[User] u
	  ON c.[UserId] = u.[Id]
	  WHERE u.[Id] = @UserId

END
GO
PRINT N'Creating [dbo].[Client_SetBalance]...';


GO
CREATE PROCEDURE [dbo].[Client_SetBalance]
	@ClientId BIGINT,
	@Balance MONEY
AS
BEGIN
	
	SET NOCOUNT ON;

	UPDATE TOP(1) [dbo].[Client]
	SET [Balance] = @Balance
	WHERE [Id] = @ClientId

END
GO
PRINT N'Creating [dbo].[Client_SumBalance]...';


GO
CREATE PROCEDURE [dbo].[Client_SumBalance]
AS BEGIN
	SET NOCOUNT ON;

	SELECT SUM(c.[Balance])
	FROM [dbo].[Client] c

END
GO
PRINT N'Creating [dbo].[Client_Update]...';


GO
CREATE PROCEDURE [dbo].[Client_Update]
	@ClientId BIGINT,
    @Emails NVARCHAR(MAX),
    @Nic NVARCHAR(MAX),
    @LegalEntity NVARCHAR(MAX),
    @Contacts NVARCHAR(MAX),
    @Phone NVARCHAR(MAX),
    @INN NVARCHAR(MAX),
    @KPP NVARCHAR(MAX),
    @OGRN NVARCHAR(MAX),
    @Bank NVARCHAR(MAX),
    @BIC NVARCHAR(MAX),
    @LegalAddress NVARCHAR(MAX),
    @MailingAddress NVARCHAR(MAX),
    @RS NVARCHAR(MAX),
    @KS NVARCHAR(MAX),
    @ContractNumber NVARCHAR(MAX),
    @ContractDate DATETIMEOFFSET

AS BEGIN
	SET NOCOUNT ON;

	UPDATE [dbo].[Client]
	SET [Emails] = @Emails,
		[Nic] = @Nic,
		[LegalEntity] = @LegalEntity,
		[Contacts] = @Contacts,
		[Phone] = @Phone,
		[INN] = @INN,
		[KPP] = @KPP,
		[OGRN] = @OGRN,
		[Bank] = @Bank,
		[BIC] = @BIC,
		[LegalAddress] = @LegalAddress,
		[MailingAddress] = @MailingAddress,
		[RS] = @RS,
		[KS] = @KS,
		[ContractNumber] = @ContractNumber,
		[ContractDate] = @ContractDate
	WHERE [Id] = @ClientId

END
GO
PRINT N'Creating [dbo].[ClientBalanceHistory_Add]...';


GO
CREATE PROCEDURE [dbo].[ClientBalanceHistory_Add]
	@ClientId BIGINT,
	@Balance MONEY,
	@Money MONEY,
	@Comment NVARCHAR(MAX),
	@Timestamp DATETIMEOFFSET,
	@EventTypeId INT,
	@IsCalculation BIT

AS BEGIN
	SET NOCOUNT ON;

	INSERT [dbo].[ClientBalanceHistory] ([Balance], [Comment], [ClientId], [Money], [Timestamp], [EventTypeId], [IsCalculation])
	VALUES (@Balance, @Comment, @ClientId, @Money, @Timestamp, @EventTypeId, @IsCalculation)

END
GO
PRINT N'Creating [dbo].[ClientBalanceHistory_Get]...';


GO
CREATE PROCEDURE [dbo].[ClientBalanceHistory_Get]
	@ClientId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT [Balance], [Comment], [Timestamp], [Money], [EventTypeId] AS [EventType], [IsCalculation]
	FROM [dbo].[ClientBalanceHistory]
	WHERE [ClientId] = @ClientId
	ORDER BY [Id] DESC

END
GO
PRINT N'Creating [dbo].[ClientBalanceHistory_GetAll]...';


GO
CREATE PROCEDURE [dbo].[ClientBalanceHistory_GetAll]

AS BEGIN
	SET NOCOUNT ON;

	SELECT h.[Balance], h.[Comment], h.[Timestamp], h.[Money], h.[EventTypeId] AS [EventType], c.[Nic] AS [ClientNic]
	FROM [dbo].[ClientBalanceHistory] h
	JOIN [dbo].[Client] c
	ON c.[Id] = h.[ClientId]
	ORDER BY h.[Id] DESC

END
GO
PRINT N'Creating [dbo].[Country_Add]...';


GO
CREATE PROCEDURE [dbo].[Country_Add]
	@EnglishName NVARCHAR(128),
	@RussianName NVARCHAR(128),
	@Position INT
AS
BEGIN
	SET NOCOUNT ON;

	INSERT [dbo].[Country] ([Name_En], [Name_Ru], [Position])
	OUTPUT INSERTED.[Id]
	VALUES (@EnglishName, @RussianName, @Position)

END
GO
PRINT N'Creating [dbo].[Country_GetList]...';


GO
CREATE PROCEDURE [dbo].[Country_GetList]
	@Language CHAR(2)
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT c.[Id], IIF(@Language = 'ru', c.[Name_Ru], c.[Name_En]) AS [Name], c.[Position]
	FROM [dbo].[Country] c
	ORDER BY c.[Position], IIF(@Language = 'ru', c.[Name_Ru], c.[Name_En]), c.[Id]

END
GO
PRINT N'Creating [dbo].[Country_Update]...';


GO
CREATE PROCEDURE [dbo].[Country_Update]
	@EnglishName NVARCHAR(128),
	@RussianName NVARCHAR(128),
	@Position INT,
	@Id BIGINT
AS
BEGIN
	SET NOCOUNT ON;

	UPDATE TOP (1) [dbo].[Country]
	SET [Name_En] = @EnglishName,
		[Name_Ru] = @RussianName,
		[Position] = @Position
	WHERE [Id] = @Id

END
GO
PRINT N'Creating [dbo].[EmailMessage_Add]...';


GO
CREATE PROCEDURE [dbo].[EmailMessage_Add]
	@State INT,
	@PartitionId INT,
	@From NVARCHAR (MAX),
	@To NVARCHAR (MAX),
	@CopyTo NVARCHAR (MAX),
	@Subject NVARCHAR (MAX),
	@Body NVARCHAR (MAX),
	@IsBodyHtml BIT,
	@Files VARBINARY (MAX)
AS
	SET NOCOUNT ON;

	INSERT [dbo].[EmailMessage] ([Body], [CopyTo], [Files], [From], [IsBodyHtml], [PartitionId], [StateId], [To], [Subject])
	VALUES (@Body, @CopyTo, @Files, @From, @IsBodyHtml, @PartitionId, @State, @To, @Subject)
GO
PRINT N'Creating [dbo].[EmailMessage_GetNext]...';


GO
CREATE PROCEDURE [dbo].[EmailMessage_GetNext]
	@State INT,
	@PartitionId INT
AS
	SET NOCOUNT ON;

	SELECT	TOP(1)
			m.[Id],
			m.[From],
			m.[To],
			m.[CopyTo],
			m.[Subject],
			m.[Body],
			m.[IsBodyHtml],
			m.[Files]
	FROM [dbo].[EmailMessage] m
	WHERE m.[StateId] = @State AND m.[PartitionId] = @PartitionId
	ORDER BY m.[Id]
GO
PRINT N'Creating [dbo].[EmailMessage_SetState]...';


GO
CREATE PROCEDURE [dbo].[EmailMessage_SetState]
	@Id BIGINT,
	@State INT
AS
	SET NOCOUNT ON;

	UPDATE TOP(1) [dbo].[EmailMessage]
	SET [StateId] = @State, [StateIdTimestamp] = GETUTCDATE()
	WHERE [Id] = @Id
GO
PRINT N'Creating [dbo].[EmailTemplate_GetByEvent]...';


GO
CREATE PROCEDURE [dbo].[EmailTemplate_GetByEvent]
	@EventTypeId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT [EmailTemplateId], [EnableEmailSend]
	FROM [dbo].[EventEmailTemplate]
	WHERE [EventTypeId] = @EventTypeId

END
GO
PRINT N'Creating [dbo].[EmailTemplate_MergeEvent]...';


GO
CREATE PROCEDURE [dbo].[EmailTemplate_MergeEvent]
	@EventTypeId INT,
	@Subject NVARCHAR (MAX),
	@Body NVARCHAR (MAX),
	@IsBodyHtml BIT,
	@EnableEmailSend BIT,
	@TwoLetterISOLanguageName CHAR(2)
AS
BEGIN
	
	SET NOCOUNT ON;

	DECLARE @TemplateId BIGINT;

	SELECT TOP(1) @TemplateId = [EmailTemplateId]
	FROM  [dbo].[EventEmailTemplate]
	WHERE [EventTypeId] = @EventTypeId

	IF @TemplateId IS NOT NULL BEGIN
		BEGIN TRAN
			MERGE [dbo].[EmailTemplateLocalization] AS target
			USING (SELECT @Subject, @Body, @IsBodyHtml, @TemplateId, @TwoLetterISOLanguageName) AS source 
						([Subject], [Body], [IsBodyHtml], [EmailTemplateId], [TwoLetterISOLanguageName])
				ON (target.[EmailTemplateId] = source.[EmailTemplateId] 
					AND target.[TwoLetterISOLanguageName] = source.[TwoLetterISOLanguageName])
			WHEN MATCHED THEN
				UPDATE
				SET [Subject] = source.[Subject],
					[Body] = source.[Body],
					[IsBodyHtml] = source.[IsBodyHtml]
			WHEN NOT MATCHED THEN
				INSERT ([EmailTemplateId], [Subject], [Body], [IsBodyHtml], [TwoLetterISOLanguageName])
				VALUES (source.[EmailTemplateId], source.[Subject], source.[Body], source.[IsBodyHtml], source.[TwoLetterISOLanguageName]);

			UPDATE TOP(1) [dbo].[EventEmailTemplate]
			SET [EnableEmailSend] = @EnableEmailSend
			WHERE [EventTypeId] = @EventTypeId AND [EmailTemplateId] = @TemplateId
		COMMIT
	END
	ELSE BEGIN
		BEGIN TRAN
			INSERT [dbo].[EmailTemplate] DEFAULT VALUES
			SET @TemplateId = SCOPE_IDENTITY()

			INSERT [dbo].[EmailTemplateLocalization] 
					([EmailTemplateId], [Subject], [Body], [IsBodyHtml], [TwoLetterISOLanguageName])
			VALUES (@TemplateId, @Subject, @Body, @IsBodyHtml, @TwoLetterISOLanguageName)

			INSERT [dbo].[EventEmailTemplate] 
					([EmailTemplateId], [EnableEmailSend], [EventTypeId])
			VALUES (@TemplateId, @EnableEmailSend, @EventTypeId);
		COMMIT
	END

END
GO
PRINT N'Creating [dbo].[EmailTemplateLocalization_Get]...';


GO
CREATE PROCEDURE [dbo].[EmailTemplateLocalization_Get]
	@TemplateId BIGINT,
	@Localizations [dbo].[StringsTable] READONLY
AS
BEGIN

	SET NOCOUNT ON;

	SELECT	l.[Subject],
			l.[Body],
			l.[IsBodyHtml],
			n.[Value] AS [TwoLetterISOLanguageName]
	FROM [dbo].[EmailTemplate] t CROSS JOIN @Localizations n
	LEFT JOIN [dbo].[EmailTemplateLocalization] l
	ON t.[Id] = l.[EmailTemplateId] AND l.[TwoLetterISOLanguageName] = n.[Value]
	WHERE t.[Id] = @TemplateId
	ORDER BY t.[Id], n.[Value]

END
GO
PRINT N'Creating [dbo].[Event_Add]...';


GO
CREATE PROCEDURE [dbo].[Event_Add]
	@StateId INT,
	@PartitionId INT,
	@EventTypeId INT,
	@Data VARBINARY(MAX)

AS BEGIN
	SET NOCOUNT ON;

	INSERT [dbo].[Event] ([EventTypeId], [StateId], [Data], [PartitionId])
	VALUES (@EventTypeId, @StateId, @Data, @PartitionId)

END
GO
PRINT N'Creating [dbo].[Event_Delete]...';


GO
CREATE PROCEDURE [dbo].[Event_Delete]
	@Id BIGINT
AS
	SET NOCOUNT ON;

	DELETE TOP(1)
	FROM [dbo].[Event]
	WHERE [Id] = @Id
GO
PRINT N'Creating [dbo].[Event_GetNext]...';


GO
CREATE PROCEDURE [dbo].[Event_GetNext]
	@EventTypeId INT,
	@PartitionId INT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1) 
			e.[Id],
			e.[StateId] AS [State],
			e.[Data]
	FROM [dbo].[Event] e
	WHERE e.[EventTypeId] = @EventTypeId AND e.[PartitionId] = @PartitionId AND e.[StateId] <> -1
	ORDER BY e.[Id]

END
GO
PRINT N'Creating [dbo].[Event_SetState]...';


GO
CREATE PROCEDURE [dbo].[Event_SetState]
	@Id BIGINT,
	@State INT
AS
	SET NOCOUNT ON;

	UPDATE TOP(1) [dbo].[Event]
	SET [StateId] = @State, [StateIdTimestamp] = GETUTCDATE()
	WHERE [Id] = @Id
GO
PRINT N'Creating [dbo].[EventEmailRecipient_Get]...';


GO
CREATE PROCEDURE [dbo].[EventEmailRecipient_Get]
	@EventTypeId INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT [RoleId]
	FROM [dbo].[EventEmailRecipient]
	WHERE [EventTypeId] = @EventTypeId
END
GO
PRINT N'Creating [dbo].[EventEmailRecipient_Set]...';


GO
CREATE PROCEDURE [dbo].[EventEmailRecipient_Set]
	@EventTypeId INT,
	@Recipients [dbo].[IdsTable] READONLY
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRAN

		DELETE [dbo].[EventEmailRecipient]
		WHERE [EventTypeId] = @EventTypeId
		AND [RoleId] NOT IN (SELECT [Id] FROM @Recipients)
		
		INSERT [dbo].[EventEmailRecipient] ([EventTypeId], [RoleId])
		SELECT @EventTypeId AS [StateId], r.[Id] AS [RoleId]
		FROM @Recipients r
		WHERE r.[Id] NOT IN (SELECT a.[RoleId] FROM [dbo].[EventEmailRecipient] a WHERE a.[EventTypeId] = @EventTypeId)

	COMMIT

END
GO
PRINT N'Creating [dbo].[Forwarder_Get]...';


GO
CREATE PROCEDURE [dbo].[Forwarder_Get]
	@Id BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1) 
			f.[Id],
			u.[Id] AS [UserId],
			f.[Email],
			u.[TwoLetterISOLanguageName] AS [Language],
			u.[Login],
			f.[Name]
	FROM	[dbo].[Forwarder] f
	JOIN	[dbo].[User] u
	ON		u.[Id] = f.[UserId]
	WHERE	f.[Id] = @Id

END
GO
PRINT N'Creating [dbo].[Forwarder_GetAll]...';


GO
CREATE PROCEDURE [dbo].[Forwarder_GetAll]
AS BEGIN
	SET NOCOUNT ON;

	SELECT	f.[Id],
			u.[Id] AS [UserId],
			f.[Email],
			u.[TwoLetterISOLanguageName] AS [Language],
			u.[Login],
			f.[Name]
	FROM	[dbo].[Forwarder] f
	JOIN	[dbo].[User] u
	ON		u.[Id] = f.[UserId]

END
GO
PRINT N'Creating [dbo].[Forwarder_GetByCity]...';


GO
CREATE PROCEDURE [dbo].[Forwarder_GetByCity]
	@CityId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT s.[ForwarderId]
	FROM [dbo].[ForwarderCity] s
	WHERE s.[CityId] = @CityId

END
GO
PRINT N'Creating [dbo].[Forwarder_GetByUserId]...';


GO
CREATE PROCEDURE [dbo].[Forwarder_GetByUserId]
	@UserId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1) [Id]
	FROM	[dbo].[Forwarder]
	WHERE	[UserId] = @UserId

END
GO
PRINT N'Creating [dbo].[Forwarder_Update]...';


GO
CREATE PROCEDURE [dbo].[Forwarder_Update]
	@Id BIGINT,
	@Name NVARCHAR (MAX),
	@Login NVARCHAR(320),
	@Email NVARCHAR (320)

AS BEGIN
	SET NOCOUNT ON;

	DECLARE @Table TABLE ([UserId] BIGINT);

	BEGIN TRAN

		UPDATE	TOP(1) [dbo].[Forwarder]
		SET		[Name] = @Name,
				[Email] = @Email
		OUTPUT	INSERTED.[UserId] INTO @Table
		WHERE	[Id] = @Id

		UPDATE	TOP(1) [dbo].[User]
		SET		[Login] = @Login
		WHERE	[Id] IN (SELECT [UserId] FROM @Table);

	COMMIT

END
GO
PRINT N'Creating [dbo].[ForwarderCity_Get]...';


GO
CREATE PROCEDURE [dbo].[ForwarderCity_Get]
	@ForwarderId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT [CityId]
	FROM [dbo].[ForwarderCity]
	WHERE [ForwarderId] = @ForwarderId

END
GO
PRINT N'Creating [dbo].[ForwarderCity_Set]...';


GO
CREATE PROCEDURE [dbo].[ForwarderCity_Set]
	@CityIds [dbo].[IdsTable] READONLY,
	@ForwarderId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRAN

		DELETE [dbo].[ForwarderCity]
		WHERE [ForwarderId] = @ForwarderId
		AND [CityId] NOT IN (SELECT [Id] FROM @CityIds)
		
		INSERT [dbo].[ForwarderCity] ([CityId], [ForwarderId])
		SELECT [Id] AS [CityId],  @ForwarderId AS [ForwarderId]
		FROM @CityIds
		WHERE [Id] NOT IN (SELECT [CityId] FROM [ForwarderCity] WHERE [ForwarderId] = @ForwarderId)

	COMMIT

END
GO
PRINT N'Creating [dbo].[GetNextDisplayNumber]...';


GO
CREATE PROCEDURE [dbo].[GetNextDisplayNumber]
AS BEGIN
	SET NOCOUNT ON;

	SELECT NEXT VALUE FOR [dbo].[DisplayNumberCounter]

END
GO
PRINT N'Creating [dbo].[Sender_Get]...';


GO
CREATE PROCEDURE [dbo].[Sender_Get]
	@Id BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1) 
			s.[Name],
			s.[Email],
			s.[TariffOfTapePerBox],
			u.[Login],
			s.[Contact],
			s.[Phone],
			s.[Address],
			u.[TwoLetterISOLanguageName] AS [Language]
	FROM	[dbo].[Sender] s
	JOIN	[dbo].[User] u
	ON		u.[Id] = s.[UserId]
	WHERE	s.[Id] = @Id

END
GO
PRINT N'Creating [dbo].[Sender_GetAll]...';


GO
CREATE PROCEDURE [dbo].[Sender_GetAll]

AS BEGIN
	SET NOCOUNT ON;

	SELECT	s.[Id] AS [EntityId],
			u.[Id] AS [UserId],
			s.[Name],
			u.[Login],
			s.[Email],
			s.[Contact],
			s.[Phone],
			s.[Address],
			u.[TwoLetterISOLanguageName] AS [Language]
	FROM	[dbo].[Sender] s
	JOIN	[dbo].[User] u
	ON		u.[Id] = s.[UserId]

END
GO
PRINT N'Creating [dbo].[Sender_GetByCountry]...';


GO
CREATE PROCEDURE [dbo].[Sender_GetByCountry]
	@CountryId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT s.[SenderId]
	FROM [dbo].[SenderCountry] s
	WHERE s.[CountryId] = @CountryId

END
GO
PRINT N'Creating [dbo].[Sender_GetByUser]...';


GO
CREATE PROCEDURE [dbo].[Sender_GetByUser]
	@UserId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1) s.[Id]
	FROM	[dbo].[Sender] s
	WHERE	s.[UserId] = @UserId

END
GO
PRINT N'Creating [dbo].[Sender_GetTariffs]...';


GO
CREATE PROCEDURE [dbo].[Sender_GetTariffs]
	@Ids [dbo].[IdsTable] READONLY

AS BEGIN
	SET NOCOUNT ON;

	SELECT	s.[Id],
			s.[TariffOfTapePerBox]
	FROM	[dbo].[Sender] s
	WHERE	s.[Id] IN (SELECT [Id] FROM @Ids)

END
GO
PRINT N'Creating [dbo].[Sender_GetUserId]...';


GO
CREATE PROCEDURE [dbo].[Sender_GetUserId]
	@Id BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT	TOP(1) s.[UserId]
	FROM	[dbo].[Sender] s
	WHERE	s.[Id] = @Id

END
GO
PRINT N'Creating [dbo].[Sender_Update]...';


GO
CREATE PROCEDURE [dbo].[Sender_Update]
	@Id BIGINT,
	@Login NVARCHAR(320),
	@Name NVARCHAR (MAX),
	@Email NVARCHAR (320),
	@TwoLetterISOLanguageName CHAR(2),
	@TariffOfTapePerBox	MONEY,
	@Contact NVARCHAR (MAX),
	@Phone NVARCHAR (MAX),
	@Address NVARCHAR (MAX)

AS BEGIN
	SET NOCOUNT ON;

	DECLARE @Table TABLE ([UserId] BIGINT);

	BEGIN TRAN

		UPDATE	TOP(1) [dbo].[Sender]
		SET		[Name] = @Name,
				[Email] = @Email,
				[TariffOfTapePerBox] = @TariffOfTapePerBox,
				[Contact] = @Contact,
				[Phone] = @Phone,
				[Address] = @Address
		OUTPUT	inserted.[UserId] INTO @Table
		WHERE	[Id] = @Id

		UPDATE	TOP(1) [dbo].[User]
		SET		[Login] = @Login,
				[TwoLetterISOLanguageName] = @TwoLetterISOLanguageName
		WHERE	[Id] IN (SELECT [UserId] FROM @Table);

	COMMIT

END
GO
PRINT N'Creating [dbo].[SenderCountry_Get]...';


GO
CREATE PROCEDURE [dbo].[SenderCountry_Get]
	@SenderId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT [CountryId]
	FROM [dbo].[SenderCountry]
	WHERE [SenderId] = @SenderId

END
GO
PRINT N'Creating [dbo].[SenderCountry_Set]...';


GO
CREATE PROCEDURE [dbo].[SenderCountry_Set]
	@CountryIds [dbo].[IdsTable] READONLY,
	@SenderId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRAN

		DELETE [dbo].[SenderCountry]
		WHERE [SenderId] = @SenderId
		AND [CountryId] NOT IN (SELECT [Id] FROM @CountryIds)
		
		INSERT [dbo].[SenderCountry] ([CountryId], [SenderId])
		SELECT [Id] AS [CountryId],  @SenderId AS [SenderId]
		FROM @CountryIds
		WHERE [Id] NOT IN (SELECT [CountryId] FROM [SenderCountry] WHERE [SenderId] = @SenderId)

	COMMIT

END
GO
PRINT N'Creating [dbo].[Setting_Get]...';


GO
CREATE PROCEDURE [dbo].[Setting_Get]
	@Type INT
AS BEGIN
	SET NOCOUNT ON

	SELECT s.[Data], s.[RowVersion], s.[Type]
	FROM [dbo].[Setting] s
	WHERE s.[Type] = @Type

END
GO
PRINT N'Creating [dbo].[Setting_Merge]...';


GO
CREATE PROCEDURE [dbo].[Setting_Merge]
	@Type INT,
	@RowVersion ROWVERSION,
	@Data VARBINARY(MAX)
AS BEGIN
	SET NOCOUNT ON

	MERGE [dbo].[Setting] AS target
		USING (SELECT @Type, @RowVersion, @Data) AS source ([Type], [RowVersion], [Data])
			ON (target.[RowVersion] = source.[RowVersion] AND target.[Type] = source.[Type])
		WHEN MATCHED THEN 
			UPDATE SET [Data] = source.[Data]
		WHEN NOT MATCHED THEN
			INSERT ([Type], [Data])
			VALUES (source.[Type], source.[Data])
		OUTPUT INSERTED.[RowVersion];

END
GO
PRINT N'Creating [dbo].[State_Add]...';


GO
CREATE PROCEDURE [dbo].[State_Add]
	@Name  NVARCHAR (320),
	@Position INT,
	@IsSystem BIT
AS
BEGIN
	
	SET NOCOUNT ON;

	INSERT [dbo].[State] ([Name], [Position], [IsSystem])
	OUTPUT INSERTED.[Id]
	VALUES (@Name, @Position, @IsSystem)

END
GO
PRINT N'Creating [dbo].[State_Delete]...';


GO
CREATE PROCEDURE [dbo].[State_Delete]
	@Id BIGINT
AS
BEGIN
	
	SET NOCOUNT ON;

	DELETE TOP(1) [dbo].[State]
	WHERE [Id] = @Id
	AND [IsSystem] = 0

END
GO
PRINT N'Creating [dbo].[State_GetOrderedList]...';


GO
CREATE PROCEDURE [dbo].[State_GetOrderedList]
	@Ids [dbo].[IdsTable] READONLY
AS
BEGIN

	SET NOCOUNT ON;

	IF EXISTS(SELECT 1 FROM @Ids)
		SELECT s.[Id], s.[Name], s.[Position], s.[IsSystem]
		FROM [dbo].[State] s
		WHERE s.[Id] IN (SELECT [Id] FROM @Ids)
		ORDER BY s.[Position], s.[Name], s.[Id]
	ELSE
		SELECT s.[Id], s.[Name], s.[Position], s.[IsSystem]
		FROM [dbo].[State] s
		ORDER BY s.[Position], s.[Name], s.[Id]

END
GO
PRINT N'Creating [dbo].[State_GetStateAvailabilities]...';


GO
CREATE PROCEDURE [dbo].[State_GetStateAvailabilities]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT s.[RoleId] AS [Role], s.[StateId]
	FROM [dbo].[StateAvailability] s
	ORDER BY s.[RoleId], s.[StateId]

END
GO
PRINT N'Creating [dbo].[State_GetStateVisibilities]...';


GO
CREATE PROCEDURE [dbo].[State_GetStateVisibilities]
AS
BEGIN

	SET NOCOUNT ON;

	SELECT s.[RoleId] AS [Role], s.[StateId]
	FROM [dbo].[StateVisibility] s
	ORDER BY s.[RoleId], s.[StateId]

END
GO
PRINT N'Creating [dbo].[State_SetStateAvailabilities]...';


GO
CREATE PROCEDURE [dbo].[State_SetStateAvailabilities]
	@StateId BIGINT,
	@Roles [dbo].[IdsTable] READONLY
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRAN

		DELETE [dbo].[StateAvailability]
		WHERE [StateId] = @StateId
		AND [RoleId] NOT IN (SELECT [Id] FROM @Roles)
		
		INSERT [dbo].[StateAvailability] ([StateId], [RoleId])
		SELECT @StateId AS [StateId], r.[Id] AS [RoleId]
		FROM @Roles r
		WHERE r.[Id] NOT IN (SELECT a.[RoleId] FROM [dbo].[StateAvailability] a WHERE a.[StateId] = @StateId)

	COMMIT

END
GO
PRINT N'Creating [dbo].[State_SetStateVisibilities]...';


GO
CREATE PROCEDURE [dbo].[State_SetStateVisibilities]
	@StateId BIGINT,
	@Roles [dbo].[IdsTable] READONLY
AS
BEGIN

	SET NOCOUNT ON;

	BEGIN TRAN

		DELETE [dbo].[StateVisibility]
		WHERE [StateId] = @StateId
		AND [RoleId] NOT IN (SELECT [Id] FROM @Roles)
		
		INSERT [dbo].[StateVisibility] ([StateId], [RoleId])
		SELECT @StateId AS [StateId], r.[Id] AS [RoleId]
		FROM @Roles r
		WHERE r.[Id] NOT IN (SELECT a.[RoleId] FROM [dbo].[StateVisibility] a WHERE a.[StateId] = @StateId)

	COMMIT

END
GO
PRINT N'Creating [dbo].[State_Update]...';


GO
CREATE PROCEDURE [dbo].[State_Update]
	@Id BIGINT,
	@Name  NVARCHAR (320),
	@Position INT
AS
BEGIN
	
	SET NOCOUNT ON;

	UPDATE [dbo].[State]
	SET [Name] = @Name, [Position] = @Position
	WHERE [Id] = @Id

END
GO
PRINT N'Creating [dbo].[StateLocalization_Get]...';


GO
CREATE PROCEDURE [dbo].[StateLocalization_Get]
	@Ids [dbo].[IdsTable] READONLY,
	@Localizations [dbo].[StringsTable] READONLY
AS
BEGIN

	SET NOCOUNT ON;

	IF EXISTS(SELECT 1 FROM @Ids)
		SELECT	i.[Id] AS [StateId],
				COALESCE(l.[Name], s.[Name]) AS [Name],
				n.[Value] AS [TwoLetterISOLanguageName]
		FROM @Ids i CROSS JOIN @Localizations n
		JOIN [dbo].[State] s ON s.[Id] = i.[Id]
		LEFT JOIN [dbo].[StateLocalization] l
		ON s.[Id] = l.[StateId] AND l.[TwoLetterISOLanguageName] = n.[Value]
		ORDER BY i.[Id], n.[Value]
	ELSE
		SELECT	s.[Id] AS [StateId],
				COALESCE(l.[Name], s.[Name]) AS [Name],
				n.[Value] AS [TwoLetterISOLanguageName]
		FROM [dbo].[State] s CROSS JOIN @Localizations n
		LEFT JOIN [dbo].[StateLocalization] l
		ON s.[Id] = l.[StateId] AND l.[TwoLetterISOLanguageName] = n.[Value]
		ORDER BY s.[Id], n.[Value]

END
GO
PRINT N'Creating [dbo].[StateLocalization_Merge]...';


GO
CREATE PROCEDURE [dbo].[StateLocalization_Merge]
	@Name  NVARCHAR (320),
	@TwoLetterISOLanguageName CHAR(2),
	@StateId BIGINT
AS
BEGIN
	
	SET NOCOUNT ON;
	
    MERGE [dbo].[StateLocalization] AS target
    
	USING (SELECT @Name, @TwoLetterISOLanguageName, @StateId) AS source ([Name], [TwoLetterISOLanguageName], [StateId])
		ON (target.[StateId] = source.[StateId] 
		AND target.[TwoLetterISOLanguageName] = source.[TwoLetterISOLanguageName])
    
	WHEN MATCHED THEN 
        UPDATE SET [Name] = source.[Name]

	WHEN NOT MATCHED THEN	
	    INSERT ([Name], [TwoLetterISOLanguageName], [StateId])
	    VALUES (source.[Name], source.[TwoLetterISOLanguageName], source.[StateId]);

END
GO
PRINT N'Creating [dbo].[Transit_Add]...';


GO
CREATE PROCEDURE [dbo].[Transit_Add]
	@CityId BIGINT,
	@CarrierId BIGINT,
	@Address NVARCHAR(MAX),	
	@RecipientName NVARCHAR(MAX),
	@Phone NVARCHAR(MAX),
	@MethodOfTransit INT,
	@DeliveryType INT,
	@WarehouseWorkingTime NVARCHAR(MAX)

AS BEGIN
	SET NOCOUNT ON;

	INSERT INTO [dbo].[Transit]
           ([CityId]
           ,[Address]
           ,[RecipientName]
           ,[Phone]
           ,[WarehouseWorkingTime]
           ,[MethodOfTransitId]
           ,[DeliveryTypeId]
           ,[CarrierId])
	OUTPUT INSERTED.[Id]
	VALUES (@CityId
           ,@Address
           ,@RecipientName
           ,@Phone
           ,@WarehouseWorkingTime
           ,@MethodOfTransit
           ,@DeliveryType
           ,@CarrierId)

END
GO
PRINT N'Creating [dbo].[Transit_Delete]...';


GO
CREATE PROCEDURE [dbo].[Transit_Delete]
	@Id BIGINT

AS BEGIN
	SET NOCOUNT ON;

	DELETE TOP(1) [dbo].[Transit]
	WHERE [Id] = @Id

END
GO
PRINT N'Creating [dbo].[Transit_Get]...';


GO
CREATE PROCEDURE [dbo].[Transit_Get]
	@Ids [dbo].[IdsTable] READONLY

AS BEGIN
	SET NOCOUNT ON;

	SELECT [Id]
		  ,[CityId]
		  ,[Address]
		  ,[RecipientName]
		  ,[Phone]
		  ,[WarehouseWorkingTime]
		  ,[MethodOfTransitId] AS [MethodOfTransit]
		  ,[DeliveryTypeId] AS [DeliveryType]
		  ,[CarrierId]
	  FROM [dbo].[Transit]
	 WHERE [Id] IN (SELECT [Id] FROM @Ids)

END
GO
PRINT N'Creating [dbo].[Transit_GetByApplication]...';


GO
CREATE PROCEDURE [dbo].[Transit_GetByApplication]
	@ApplicationId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT t.[Id]
		  ,t.[CityId]
		  ,t.[Address]
		  ,t.[RecipientName]
		  ,t.[Phone]
		  ,t.[WarehouseWorkingTime]
		  ,t.[MethodOfTransitId] AS [MethodOfTransit]
		  ,t.[DeliveryTypeId] AS [DeliveryType]
		  ,t.[CarrierId]
	  FROM [dbo].[Transit] t
	  JOIN [dbo].[Application] a
		ON t.[Id] = a.[TransitId]
	 WHERE a.[Id] = @ApplicationId

END
GO
PRINT N'Creating [dbo].[Transit_GetByClient]...';


GO
CREATE PROCEDURE [dbo].[Transit_GetByClient]
	@ClientId BIGINT

AS BEGIN
	SET NOCOUNT ON;

	SELECT t.[Id]
		  ,t.[CityId]
		  ,t.[Address]
		  ,t.[RecipientName]
		  ,t.[Phone]
		  ,t.[WarehouseWorkingTime]
		  ,t.[MethodOfTransitId] AS [MethodOfTransit]
		  ,t.[DeliveryTypeId] AS [DeliveryType]
		  ,t.[CarrierId]
	  FROM [dbo].[Transit] t
	  JOIN [dbo].[Client] c
		ON t.[Id] = c.[TransitId]
	 WHERE c.[Id] = @ClientId

END
GO
PRINT N'Creating [dbo].[Transit_Update]...';


GO
CREATE PROCEDURE [dbo].[Transit_Update]
	@Id BIGINT,
	@CityId BIGINT,
	@CarrierId BIGINT,
	@Address NVARCHAR(MAX),	
	@RecipientName NVARCHAR(MAX),
	@Phone NVARCHAR(MAX),
	@MethodOfTransit INT,
	@DeliveryType INT,
	@WarehouseWorkingTime NVARCHAR(MAX)

AS BEGIN
	SET NOCOUNT ON;

	UPDATE [dbo].[Transit]
	   SET [CityId] = @CityId
		  ,[Address] = @Address
		  ,[RecipientName] = @RecipientName
		  ,[Phone] = @Phone
		  ,[WarehouseWorkingTime] = @WarehouseWorkingTime
		  ,[MethodOfTransitId] = @MethodOfTransit
		  ,[DeliveryTypeId] = @DeliveryType
		  ,[CarrierId] = @CarrierId
	 WHERE [Id] = @Id
 
END
GO
PRINT N'Creating [dbo].[User_Add]...';


GO
CREATE PROCEDURE [dbo].[User_Add]
	@Login						NVARCHAR(320),
	@PasswordHash				VARBINARY(8000),
	@PasswordSalt				VARBINARY(8000),
	@TwoLetterISOLanguageName	CHAR(2)

AS BEGIN
	SET NOCOUNT ON;

	INSERT	[dbo].[User] ([Login], [PasswordHash], [PasswordSalt], [TwoLetterISOLanguageName])
	OUTPUT	INSERTED.[Id]
	VALUES	(@Login, @PasswordHash, @PasswordSalt, @TwoLetterISOLanguageName)

END
GO
PRINT N'Creating [dbo].[User_GetLanguage]...';


GO
CREATE PROCEDURE [dbo].[User_GetLanguage]
	@UserId BIGINT
AS
BEGIN

	SET NOCOUNT ON;

	SELECT TOP(1) [TwoLetterISOLanguageName]
	FROM [dbo].[User]
	WHERE [Id] = @UserId

END
GO
PRINT N'Creating [dbo].[User_GetPasswordData]...';


GO
CREATE PROCEDURE [dbo].[User_GetPasswordData]
	@Login NVARCHAR(320)
AS
BEGIN

	SET NOCOUNT ON;

	SELECT TOP(1) u.[PasswordHash], u.[PasswordSalt], u.[Id] AS [UserId]
	FROM [dbo].[User] u
	WHERE u.[Login] = @Login

END
GO
PRINT N'Creating [dbo].[User_GetUserIdByEmail]...';


GO
CREATE PROCEDURE [dbo].[User_GetUserIdByEmail]
	@Email NVARCHAR (320)
AS
BEGIN
	
	SET NOCOUNT ON;

	SELECT COALESCE(
		(SELECT TOP 1 u.[Id]
		FROM [dbo].[User] u
		JOIN [dbo].[Admin] a ON a.[UserId] = u.[Id]
		WHERE a.[Email] = @Email),

		(SELECT TOP 1 u.[Id]
		FROM [dbo].[User] u
		JOIN [dbo].[Manager] a ON a.[UserId] = u.[Id]
		WHERE a.[Email] = @Email),

		(SELECT TOP 1 u.[Id]
		FROM [dbo].[User] u
		JOIN [dbo].[Client] a ON a.[UserId] = u.[Id]
		WHERE a.[Emails] LIKE @Email),

		(SELECT TOP 1 u.[Id]
		FROM [dbo].[User] u
		JOIN [dbo].[Sender] a ON a.[UserId] = u.[Id]
		WHERE a.[Email] = @Email),

		(SELECT TOP 1 u.[Id]
		FROM [dbo].[User] u
		JOIN [dbo].[Broker] a ON a.[UserId] = u.[Id]
		WHERE a.[Email] = @Email),

		(SELECT TOP 1 u.[Id]
		FROM [dbo].[User] u
		JOIN [dbo].[Carrier] a ON a.[UserId] = u.[Id]
		WHERE a.[Email] = @Email),

		(SELECT TOP 1 u.[Id]
		FROM [dbo].[User] u
		JOIN [dbo].[Forwarder] a ON a.[UserId] = u.[Id]
		WHERE a.[Email] = @Email)) AS [Id]

END
GO
PRINT N'Creating [dbo].[User_SetLanguage]...';


GO
CREATE PROCEDURE [dbo].[User_SetLanguage]
	@UserId BIGINT,
	@Language CHAR(2)

AS BEGIN
	SET NOCOUNT ON;

	UPDATE TOP(1) [dbo].[User]
	SET [TwoLetterISOLanguageName] = @Language
	WHERE [Id] = @UserId

END
GO
PRINT N'Creating [dbo].[User_SetLogin]...';


GO
CREATE PROCEDURE [dbo].[User_SetLogin]
	@UserId BIGINT,
	@Login NVARCHAR (320)

AS BEGIN
	SET NOCOUNT ON;

	UPDATE TOP(1) [dbo].[User]
	SET [Login] = @Login
	WHERE [Id] = @UserId

END
GO
PRINT N'Creating [dbo].[User_SetPassword]...';


GO
CREATE PROCEDURE [dbo].[User_SetPassword]
	@UserId BIGINT,
	@Salt VARBINARY(8000),
	@Hash VARBINARY(8000)
AS
	SET NOCOUNT ON;

	UPDATE	TOP(1) [dbo].[User]
	SET		[PasswordHash] = @Hash,
			[PasswordSalt] = @Salt
	WHERE	[Id] = @UserId
GO
PRINT N'Creating [dbo].[Carrier_Add]...';


GO
CREATE PROCEDURE [dbo].[Carrier_Add]
	@Login NVARCHAR(320),
	@PasswordHash VARBINARY(8000),
	@PasswordSalt VARBINARY(8000),
	@Language CHAR(2),
	@Name NVARCHAR (MAX),
	@Contact NVARCHAR (MAX),
	@Phone NVARCHAR (MAX),
	@Address NVARCHAR (MAX),
	@Email NVARCHAR (320)

AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRAN

		DECLARE @Table TABLE([UserId] BIGINT);
		INSERT @Table EXEC [dbo].[User_Add]
			@Login = @Login,
			@PasswordHash = @PasswordHash, 
			@PasswordSalt = @PasswordSalt, 
			@TwoLetterISOLanguageName = @Language

		INSERT [dbo].[Carrier] ([UserId], [Name], [Email], [Contact], [Phone], [Address])
		OUTPUT INSERTED.[Id]
		SELECT [UserId], @Name, @Email, @Contact, @Phone, @Address
		FROM @Table

	COMMIT

END
GO
PRINT N'Creating [dbo].[Forwarder_Add]...';


GO
CREATE PROCEDURE [dbo].[Forwarder_Add]
	@Login NVARCHAR(320),
	@PasswordHash VARBINARY(8000),
	@PasswordSalt VARBINARY(8000),
	@Language CHAR(2),
	@Name NVARCHAR (MAX),
	@Email NVARCHAR (320)

AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRAN

		DECLARE @Table TABLE([UserId] BIGINT);
		INSERT @Table EXEC [dbo].[User_Add]
			@Login = @Login, @PasswordHash = @PasswordHash, 
			@PasswordSalt = @PasswordSalt, 
			@TwoLetterISOLanguageName = @Language

		INSERT [dbo].[Forwarder] ([UserId], [Name], [Email])
		OUTPUT INSERTED.[Id]
		SELECT [UserId], @Name, @Email
		FROM @Table

	COMMIT

END
GO
PRINT N'Creating [dbo].[Sender_Add]...';


GO
CREATE PROCEDURE [dbo].[Sender_Add]
	@Login NVARCHAR(320),
	@PasswordHash VARBINARY(8000),
	@PasswordSalt VARBINARY(8000),
	@TwoLetterISOLanguageName CHAR(2),
	@Name NVARCHAR (MAX),
	@Email NVARCHAR (320),
	@TariffOfTapePerBox MONEY,
	@Contact NVARCHAR (MAX),
	@Phone NVARCHAR (MAX),
	@Address NVARCHAR (MAX)

AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRAN

		DECLARE @Table TABLE([UserId] BIGINT);
		INSERT @Table EXEC [dbo].[User_Add]
			@Login = @Login, @PasswordHash = @PasswordHash, 
			@PasswordSalt = @PasswordSalt, 
			@TwoLetterISOLanguageName = @TwoLetterISOLanguageName

		INSERT [dbo].[Sender] ([UserId], [Name], [Email], [TariffOfTapePerBox], [Contact], [Phone], [Address])
		OUTPUT INSERTED.[Id]
		SELECT [UserId], @Name, @Email, @TariffOfTapePerBox, @Contact, @Phone, @Address
		FROM @Table

	COMMIT

END
GO
INSERT [dbo].[Country] ([Name_En], [Name_Ru], [Position]) VALUES 
(N'Abkhazia', N'Абхазия', 108),
(N'Afghanistan', N'Афганистан', 111),
(N'Aland Islands', N'Аландские острова', 75),
(N'Albania', N'Албания', 47),
(N'Algeria', N'Алжир', 238),
(N'American Samoa', N'Американское Самоа', 218),
(N'Andorra', N'Андорра', 239),
(N'Angola', N'Ангола', 81),
(N'Anguilla', N'Ангилья', 15),
(N'Antarctica', N'Антарктика', 119),
(N'Antigua and Barbuda', N'Антигуа и Барбуда', 206),
(N'Argentina', N'Аргентина', 12),
(N'Armenia', N'Армения', 13),
(N'Aruba', N'Аруба', 14),
(N'Australia', N'Австралия', 8),
(N'Austria', N'Австрия', 16),
(N'Azerbaijan', N'Азербайджан', 17),
(N'Azores', N'Азорские острова', 18),
(N'Bahamas', N'Багамские Острова', 19),
(N'Bahrain', N'Бахрейн', 20),
(N'Bangladesh', N'Бангладеш', 21),
(N'Barbados', N'Барбадос', 22),
(N'Belarus', N'Беларусь', 23),
(N'Belgium', N'Бельгия', 24),
(N'Belize', N'Белиз', 25),
(N'Benin', N'Бенин', 26),
(N'Bermuda', N'Бермудские Острова', 27),
(N'Bolivia', N'Боливия', 28),
(N'Bosnia-Herzegovina', N'Босния и Герцеговина', 29),
(N'Botswana', N'Ботсвана', 30),
(N'Bouvet Island', N'Буве', 31),
(N'Brazil', N'Бразилия', 32),
(N'British Indian Ocean Territory', N'Британская территория в Индийском океане', 33),
(N'Brunei Darussalam', N'Бруней', 34),
(N'Bulgaria', N'Болгария', 35),
(N'Burkina Faso', N'Буркина-Фасо', 36),
(N'Burundi', N'Бурунди', 37),
(N'Buthan', N'Бутан', 38),
(N'Cambodia', N'Камбоджа', 39),
(N'Cameroon', N'Камерун', 40),
(N'Canada', N'Канада', 41),
(N'Cape Verde', N'Кабо-Верде', 42),
(N'Cayman Islands', N'Каймановы Острова', 43),
(N'Central African Rep.', N'Центральноафриканская Республика', 44),
(N'Chad', N'Чад', 45),
(N'Chile', N'Чили', 46),
(N'China', N'Китай', 4),
(N'Christmas Island', N'Остров Рождества', 48),
(N'Cocos (Keeling) Isl.', N'Кокосовые Острова', 49),
(N'Colombia', N'Колумбия', 50),
(N'Comoros', N'Коморские Острова', 51),
(N'Cook Islands', N'Кука острова', 52),
(N'Costa Rica', N'Коста-Рика', 53),
(N'Croatia', N'Хорватия', 54),
(N'Cuba', N'Куба', 55),
(N'Cyprus', N'Кипр', 56),
(N'Czech Republic', N'Чехия', 57),
(N'Democratic Republic of the Congo', N'Конго, Демократическая Республика', 58),
(N'Denmark', N'Дания', 59),
(N'Djibouti', N'Джибути', 60),
(N'Dominica', N'Доминика', 61),
(N'Dominican Republic', N'Доминиканская Республика', 62),
(N'East Timor', N'Восточный Тимор', 63),
(N'Ecuador', N'Эквадор', 64),
(N'Egypt', N'Египет', 65),
(N'El Salvador', N'Сальвадор', 66),
(N'Equatorial Guinea', N'Экваториальная Гвинея', 67),
(N'Eritrea', N'Эритрея', 68),
(N'Estonia', N'Эстония', 69),
(N'Ethiopia', N'Эфиопия', 70),
(N'Falkland Islands', N'Фолклендские (Мальвинские) острова', 71),
(N'Faroe Islands', N'Фарерские Острова', 72),
(N'Fiji', N'Фиджи', 73),
(N'Finland', N'Финляндия', 74),
(N'France', N'Франция', 3),
(N'French Polynesia', N'Французская Полинезия', 76),
(N'French Southern and Antarctic Lands', N'Французские Южные и Антарктические Территории', 77),
(N'Gabon', N'Габон', 78),
(N'Gambia', N'Гамбия', 79),
(N'Georgia', N'Грузия', 80),
(N'Germany', N'Германия', 7),
(N'Ghana', N'Гана', 82),
(N'Gibraltar', N'Гибралтар', 83),
(N'Greece', N'Греция', 84),
(N'Greenland', N'Гренландия', 85),
(N'Grenada', N'Гренада', 86),
(N'Guadeloupe (Fr.)', N'Гваделупа', 87),
(N'Guam (US)', N'Гуам', 88),
(N'Guatemala', N'Гватемала', 89),
(N'Guernsey', N'Гернси', 90),
(N'Guinea', N'Гвинея', 91),
(N'Guinea Bissau', N'Гвинея-Бисау', 92),
(N'Guyana', N'Гвиана', 93),
(N'Guyana (Fr.)', N'Гайана', 94),
(N'Haiti', N'Гаити', 95),
(N'Heard Island and McDonald Islands', N'Острова Херд и Макдональд', 96),
(N'Honduras', N'Гондурас', 97),
(N'Hong Kong', N'Гонконг', 98),
(N'Hungary', N'Венгрия', 99),
(N'Iceland', N'Исландия', 100),
(N'India', N'Индия', 101),
(N'Indonesia', N'Индонезия', 102),
(N'Iran', N'Иран', 103),
(N'Iraq', N'Ирак', 104),
(N'Ireland', N'Ирландия', 105),
(N'Isle of Man', N'Остров Мэн', 106),
(N'Israel', N'Израиль', 107),
(N'Italy', N'Италия', 1),
(N'Ivory Coast', N'Кот-д''Ивуар', 109),
(N'Jamaica', N'Ямайка', 110),
(N'Japan', N'Япония', 2),
(N'Jersey', N'Джерси', 112),
(N'Jordan', N'Иордания', 113),
(N'Kazachstan', N'Казахстан', 114),
(N'Kenya', N'Кения', 115),
(N'Kirgistan', N'Кыргызстан', 116),
(N'Kiribati', N'Кирибати', 117),
(N'Korea (North)', N'Корея (Северная)', 118),
(N'Korea (South)', N'Корея (Южная)', 10),
(N'Kosovo', N'Косово', 120),
(N'Kuwait', N'Кувейт', 121),
(N'Laos', N'Лаос', 122),
(N'Latvia', N'Латвия', 123),
(N'Lebanon', N'Ливан', 124),
(N'Lesotho', N'Лесото', 125),
(N'Liberia', N'Либерия', 126),
(N'Libya', N'Ливия', 127),
(N'Liechtenstein', N'Лихтенштейн', 128),
(N'Lithuania', N'Литва', 129),
(N'Luxembourg', N'Люксембург', 130),
(N'Macau', N'Аомынь', 131),
(N'Madagascar', N'Мадагаскар', 132),
(N'Malawi', N'Малави', 133),
(N'Malaysia', N'Малайзия', 134),
(N'Maldives', N'Мальдивы', 135),
(N'Mali', N'Мали', 136),
(N'Malta', N'Мальта', 137),
(N'Marshall Islands', N'Маршалловы Острова', 138),
(N'Martinique (Fr.)', N'Мартиника', 139),
(N'Mauritania', N'Мавритания', 140),
(N'Mauritius', N'Маврикий', 141),
(N'Mayotte', N'Майотта', 142),
(N'Mexico', N'Мексика', 143),
(N'Micronesia', N'Микронезия', 144),
(N'Moldavia', N'Молдова', 145),
(N'Monaco', N'Монако', 146),
(N'Mongolia', N'Монголия', 147),
(N'Montenegro', N'Черногория', 148),
(N'Montserrat', N'Монтсеррат', 149),
(N'Morocco', N'Морокко', 150),
(N'Mozambique', N'Мозамбик', 151),
(N'Myanmar', N'Мьянма', 152),
(N'Nagorno-Karabakh Republic', N'Нагорно-Карабахская Республика', 153),
(N'Namibia', N'Намибия', 154),
(N'Nauru', N'Науру', 155),
(N'Nepal', N'Непал', 156),
(N'Netherland Antilles', N'Антильские Острова', 157),
(N'Netherlands', N'Нидерланды', 158),
(N'New Caledonia (Fr.)', N'Новая Каледония', 159),
(N'New Zealand', N'Новая Зеландия', 160),
(N'Nicaragua', N'Никарагуа', 161),
(N'Niger', N'Нигер', 162),
(N'Nigeria', N'Нигерия', 163),
(N'Niue', N'Ниуэ', 164),
(N'Norfolk Island', N'Норфолк', 165),
(N'Northern Cyprus', N'Турецкая Республика Северного Кипра', 166),
(N'Northern Mariana Isl.', N'Северные Марианские острова', 167),
(N'Norway', N'Норвегия', 168),
(N'Oman', N'Оман', 169),
(N'Pakistan', N'Пакистан', 170),
(N'Palau', N'Палау', 171),
(N'Palestine', N'Палестина', 172),
(N'Panama', N'Панама', 173),
(N'Papua New', N'Папуа — Новая Гвинея', 174),
(N'Paraguay', N'Парагвай', 175),
(N'Peru', N'Перу', 176),
(N'Philippines', N'Филиппины', 177),
(N'Pitcairn', N'Питкэрн', 178),
(N'Poland', N'Польша', 179),
(N'Portugal', N'Португалия', 180),
(N'Puerto Rico', N'Пуэрто-Рико', 181),
(N'Qatar', N'Катар', 182),
(N'Republic of Macedonia', N'Македония', 183),
(N'Republic of Somaliland', N'Сомалиленд', 184),
(N'Republic of the Congo', N'Республика Конго', 185),
(N'Reunion (Fr.)', N'Реюньон', 186),
(N'Romania', N'Румыния', 187),
(N'Russia', N'Россия', 188),
(N'Rwanda', N'Руанда', 189),
(N'Saint Lucia', N'Сент-Люсия', 190),
(N'Samoa', N'Самоа', 191),
(N'San Marino', N'Сан-Марино', 192),
(N'Saudi Arabia', N'Саудовская Аравия', 193),
(N'Senegal', N'Сенегал', 194),
(N'Serbia', N'Сербия', 195),
(N'Seychelles', N'Сейшельские острова', 196),
(N'Sierra Leone', N'Сьерра-Леоне', 197),
(N'Singapore', N'Сингапур', 198),
(N'Slovak Republic', N'Словакия', 199),
(N'Slovenia', N'Словения', 200),
(N'Solomon Islands', N'Соломоновы Острова', 201),
(N'Somalia', N'Сомали', 202),
(N'South Africa', N'Южно-Африканская Республика', 203),
(N'South Georgia and the South Sandwich Islands', N'Южная Георгия и Южные Сандвичевы острова', 204),
(N'South Ossetia', N'Южная Осетия', 205),
(N'Spain', N'Испания', 11),
(N'Sri Lanka', N'Шри-Ланка', 207),
(N'St. Helena', N'Остров Святой Елены', 208),
(N'St. Pierre & Miquelon', N'Сен-Пьер и Микелон', 209),
(N'St. Tome and Principe', N'Сан-Томе и Принсипи', 210),
(N'St.Kitts Nevis Anguilla', N'Сент-Киттс и Невис', 211),
(N'St.Vincent & Grenadines', N'Сент-Винсент и Гренадины', 212),
(N'Sudan', N'Судан', 213),
(N'Suriname', N'Суринам', 214),
(N'Svalbard & Jan Mayen Is', N'Свальбард', 215),
(N'Swaziland', N'Свазиленд', 216),
(N'Sweden', N'Швеция', 217),
(N'Switzerland', N'Швейцария', 6),
(N'Syria', N'Сирия', 219),
(N'Tadjikistan', N'Таджикистан', 220),
(N'Taiwan', N'Тайвань', 221),
(N'Tamil Eelam', N'Тамил-Илам', 222),
(N'Tanzania', N'Танзания', 223),
(N'Thailand', N'Таиланд', 224),
(N'Togo', N'Того', 225),
(N'Tokelau', N'Токелау', 226),
(N'Tonga', N'Тонга', 227),
(N'Transnistria', N'Приднестровье', 228),
(N'Trinidad & Tobago', N'Тринидад и Тобаго', 229),
(N'Tunisia', N'Тунис', 230),
(N'Turkey', N'Турция', 231),
(N'Turkmenistan', N'Туркменистан', 232),
(N'Turks and Caicos Islands', N'Тёркс и Кайкос', 233),
(N'Tuvalu', N'Тувалу', 234),
(N'Uganda', N'Уганда', 235),
(N'Ukraine', N'Украина', 236),
(N'United Arab Emirates', N'Объединенные Арабские Эмираты', 237),
(N'United Kingdom (Great Britain)', N'Великобритания', 5),
(N'United States', N'Соединенные Штаты Америки', 239),
(N'United States Minor Outlying Islands', N'Внешние малые острова (США)', 240),
(N'Uruguay', N'Уругвай', 241),
(N'Uzbekistan', N'Узбекистан', 242),
(N'Vanuatu', N'Вануату', 243),
(N'Vatican City State', N'Ватикан', 244),
(N'Venezuela', N'Венесуэла', 245),
(N'Vietnam', N'Вьетнам', 246),
(N'Virgin Islands (British)', N'Виргинские Острова (Британские)', 247),
(N'Virgin Islands (US)', N'Виргинские Острова (США)', 248),
(N'Wallis & Futuna Islands', N'Острова Уоллис и Футуна', 249),
(N'Western Sahara', N'Западная Сахара', 250),
(N'Yemen', N'Йемен', 251),
(N'Zambia', N'Замбия', 252),
(N'Zimbabwe', N'Зимбабве', 253)
GO

INSERT [dbo].[City] ([Name_En], [Name_Ru], [Position]) VALUES 
(N'Moscow', N'Москва', 1),
(N'New York', N'Нью Йорк', 2),
(N'Владивосток', N'Владивосток', 3),
(N'г. Ю. Сахалинск', N'г. Ю. Сахалинск', 4),
(N'Екатеринбург', N'Екатеринбург', 5),
(N'Иркутск', N'Иркутск', 6),
(N'Кемерово', N'Кемерово', 7),
(N'Краснодар', N'Краснодар', 8),
(N'Новосибирск', N'Новосибирск', 9),
(N'Петербург', N'Петербург', 10),
(N'Сургут', N'Сургут', 11),
(N'Тобольск', N'Тобольск', 12),
(N'Тула', N'Тула', 13),
(N'Тюмень', N'Тюмень', 14),
(N'Улан-Удэ', N'Улан-Удэ', 15),
(N'Челябинск', N'Челябинск', 16)

/****** Object:  Table [dbo].[State]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[State] ON
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (1, N'New', 10, 1) -- Новая заявка
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (3, N'Cargo is not ready', 20, 0) -- Груз не готов
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (13, N'Factory does not respond', 30, 0) -- Фабрика не отвечает
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (2, N'Factory awaits payment', 40, 0) -- Фабрика ждет оплату
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (10, N'Factory cargo sent', 50, 1) -- Фабрика отправила груз
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (15, N'Cargo ready to pick up', 55, 0) -- Груз готов для забора
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (4, N'Cargo pick up', 60, 0) -- Груз забран на фабрике
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (6, N'Cargo in stock', 70, 1) -- Груз на складе
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (7, N'Cargo flew', 90, 1) -- Груз вылетел
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (8, N'Cargo at customs', 100, 1) -- Груз на таможне
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (9, N'Customs cleared cargo', 110, 1) -- Груз выпущен
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (12, N'On transit', 120, 1) -- На транзите
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (14, N'Stop', 130, 0) -- Груз на стопе
INSERT [dbo].[State] ([Id], [Name], [Position],[IsSystem]) VALUES (11, N'Cargo received', 140, 1) -- Груз получен
SET IDENTITY_INSERT [dbo].[State] OFF

/****** Object:  Table [dbo].[StateLocalization]    Script Date: 05/18/2013 14:17:27 ******/
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Новая заявка', N'ru', 1);
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Nuovo', N'it', 1)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'New order', N'en', 1)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Фабрика ждет оплату', N'ru', 2)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Fabbrica attende il pagamento', N'it', 2)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Factory awaits payment', N'en', 2)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз не готов', N'ru', 3)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car non è pronto', N'it', 3)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car is not ready', N'en', 3)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз забран на фабрике', N'ru', 4)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car è ritirata in fabbrica', N'it', 4)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car is picked', N'en', 4)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз на складе', N'ru', 6)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car in magazzino', N'it', 6)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car in warehouse', N'en', 6)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз вылетел', N'ru', 7)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car volò', N'it', 7)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car departed', N'en', 7)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз на таможне', N'ru', 8)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car alla dogana', N'it', 8)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car at customs', N'en', 8)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз выпущен', N'ru', 9)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Sdoganate car', N'it', 9)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Customs cleared car', N'en', 9)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Фабрика отправила груз', N'ru', 10)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Carico di fabbrica inviato', N'it', 10)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Factory car sent', N'en', 10)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз получен', N'ru', 11)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car ha ricevuto', N'it', 11)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car received', N'en', 11)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'На транзите', N'ru', 12)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Sul transito', N'it', 12)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'On transit', N'en', 12)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Фабрика не отвечает', N'ru', 13)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Fabbrica non risponde', N'it', 13)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Factory does not respond', N'en', 13)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз на стопе', N'ru', 14)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Stop', N'it', 14)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Stop', N'en', 14)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Груз готов для забора', N'ru', 15)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car ready to pick-up', N'it', 15)
INSERT [dbo].[StateLocalization] ([Name], [TwoLetterISOLanguageName], [StateId]) VALUES (N'Car ready to pick-up', N'en', 15)

/****** Object:  Table [dbo].[StateAvailability]    Script Date: 05/18/2013 14:17:27 ******/
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 1)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 2)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 3)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 4)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 6)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 7)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 8)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 9)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 10)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 11)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 12)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 13)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 14)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (1, 15)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 1)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 2)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 3)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 4)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 6)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 7)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 10)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 13)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (2, 15)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (3, 7)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (3, 8)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (3, 9)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (4, 9)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (4, 12)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (4, 14)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (5, 1)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (5, 11)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (5, 12)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (6, 9)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (6, 12)
INSERT [dbo].[StateAvailability] ([RoleId], [StateId]) VALUES (6, 14)

INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 1)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 1)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 1)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 2)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 2)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 2)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 3)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 3)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 3)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 4)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 4)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 4)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 6)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 6)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 6)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 7)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 7)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (3, 7)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 7)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 8)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 8)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (3, 8)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 8)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 9)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 9)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (3, 9)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 9)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 10)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 10)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 10)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 11)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 11)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 11)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 12)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 12)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 12)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 13)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 13)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 13)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 14)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 14)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 14)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (1, 15)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (2, 15)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (5, 15)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (4, 7)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (4, 8)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (4, 9)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (4, 11)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (4, 12)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (4, 14)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (6, 7)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (6, 8)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (6, 9)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (6, 11)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (6, 12)
INSERT [dbo].[StateVisibility] ([RoleId], [StateId]) VALUES (6, 14)

/****** Object:  Table [dbo].[User]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[User] ON;
INSERT INTO [dbo].[User] ([Id], [Login], [PasswordHash], [PasswordSalt], [TwoLetterISOLanguageName]) VALUES
(1, N'Admin', 0xD620502F233C7DE84C19612F3BFB3C9AF4F18485B8E4D7F3A0C82CBE8E75B0A3, 0x811BE7CE29ABCC4CABF9628D1FEBF5FB, N'ru')
INSERT INTO [dbo].[User] ([Id], [Login], [PasswordHash], [PasswordSalt], [TwoLetterISOLanguageName]) VALUES
(2, N'Broker1', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(14, N'Broker2', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(3, N'Forwarder1', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(4, N'Sender1', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(5, N'c1', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(6, N'c2', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(7, N'c3', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(8, N'c4', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(9, N'c5', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(10, N'Forwarder2', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(11, N'Sender2', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(12, N'Carrier1', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru'),
(13, N'Carrier2', CAST(NEWID() AS VARBINARY(MAX)), CAST(NEWID() AS VARBINARY(MAX)), N'ru')
SET IDENTITY_INSERT [dbo].[User] OFF;

/****** Object:  Table [dbo].[Carrier]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[Carrier] ON
INSERT [dbo].[Carrier] ([Id], [UserId], [Name], [Email], [Contact], [Address], [Phone]) VALUES 
(1, 12, N'Carrier1', N'Carrier1@timez.org', N'Contact_' + CAST(NEWID() AS NVARCHAR(50)), N'Address_' + CAST(NEWID() AS NVARCHAR(50)), N'Phone_' + CAST(NEWID() AS NVARCHAR(50))),
(2, 13, N'Carrier2', N'Carrier2@timez.org', N'Contact_' + CAST(NEWID() AS NVARCHAR(50)), N'Address_' + CAST(NEWID() AS NVARCHAR(50)), N'Phone_' + CAST(NEWID() AS NVARCHAR(50)))
SET IDENTITY_INSERT [dbo].[Carrier] OFF

INSERT [dbo].[CarrierCity] ([CityId], [CarrierId])
SELECT [Id] AS [CityId], 1 AS [CarrierId]
FROM [dbo].[City]
WHERE [Id] < 8

INSERT [dbo].[CarrierCity] ([CityId], [CarrierId])
SELECT [Id] AS [CityId], 2 AS [CarrierId]
FROM [dbo].[City]
WHERE [Id] >= 8


/****** Object:  Table [dbo].[Transit]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[Transit] ON
INSERT [dbo].[Transit] ([Id], [CityId], [Address], [RecipientName], [Phone], [MethodOfTransitId], [DeliveryTypeId], [CarrierId]) VALUES
(1, 10, N'Address 0', N'Recipient 0', N'Phone 0', 0, 0, 1),
(2, 1, N'Address 1', N'Recipient 1', N'Phone 1', 1, 1, 2),
(3, 2, N'Address 2', N'Recipient 2', N'Phone 2', 2, 0, 1),
(4, 3, N'Address 3', N'Recipient 3', N'Phone 3', 0, 1, 1),
(5, 4, N'Address 4', N'Recipient 4', N'Phone 4', 1, 0, 1),
(6, 10, N'Address 0', N'RecipientName 0', N'Phone 0', 0, 0, 1),
(7, 1, N'Address 1', N'RecipientName 1', N'Phone 1', 1, 1, 2),
(8, 2, N'Address 2', N'RecipientName 2', N'Phone 2', 2, 0, 2),
(9, 3, N'Address 3', N'RecipientName 3', N'Phone 3', 0, 1, 2),
(10, 4, N'Address 4', N'RecipientName 4', N'Phone 4', 1, 0, 1),
(11, 5, N'Address 5', N'RecipientName 5', N'Phone 5', 2, 1, 1),
(12, 6, N'Address 6', N'RecipientName 6', N'Phone 6', 0, 0, 1),
(13, 7, N'Address 7', N'RecipientName 7', N'Phone 7', 1, 1, 1),
(14, 8, N'Address 8', N'RecipientName 8', N'Phone 8', 2, 0, 1),
(15, 9, N'Address 9', N'RecipientName 9', N'Phone 9', 0, 1, 1),
(16, 10, N'Address 10', N'RecipientName 10', N'Phone 10', 1, 0, 2),
(17, 11, N'Address 11', N'RecipientName 11', N'Phone 11', 2, 1, 2),
(18, 12, N'Address 12', N'RecipientName 12', N'Phone 12', 0, 0, 2),
(19, 13, N'Address 13', N'RecipientName 13', N'Phone 13', 1, 1, 2),
(20, 14, N'Address 14', N'RecipientName 14', N'Phone 14', 2, 0, 2),
(21, 15, N'Address 15', N'RecipientName 15', N'Phone 15', 0, 1, 2),
(22, 16, N'Address 16', N'RecipientName 16', N'Phone 16', 1, 0, 2),
(23, 7, N'Address 17', N'RecipientName 17', N'Phone 17', 2, 1, 2),
(24, 8, N'Address 18', N'RecipientName 18', N'Phone 18', 0, 0, 2),
(25, 9, N'Address 19', N'RecipientName 19', N'Phone 19', 1, 1, 2),
(26, 10, N'Address 20', N'RecipientName 20', N'Phone 20', 2, 0, 1),
(27, 1, N'Address 21', N'RecipientName 21', N'Phone 21', 0, 1, 1),
(28, 2, N'Address 22', N'RecipientName 22', N'Phone 22', 1, 0, 1),
(29, 3, N'Address 23', N'RecipientName 23', N'Phone 23', 2, 1, 1),
(30, 4, N'Address 24', N'RecipientName 24', N'Phone 24', 0, 0, 1)
SET IDENTITY_INSERT [dbo].[Transit] OFF



/****** Object:  Table [dbo].[Broker]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[Broker] ON
INSERT [dbo].[Broker] ([Id], [UserId], [Name], [Email]) VALUES 
(1, 2, N'Broker1', N'Broker1@timez.org'),
(2, 14, N'Broker2', N'Broker2@timez.org')
SET IDENTITY_INSERT [dbo].[Broker] OFF


/****** Object:  Table [dbo].[Admin]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[Admin] ON
INSERT [dbo].[Admin] ([Id], [UserId], [Name], [Email]) VALUES (1, 1, N'Admin', N'Admin@timez.org')
SET IDENTITY_INSERT [dbo].[Admin] OFF


/****** Object:  Table [dbo].[Forwarder]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[Forwarder] ON
INSERT [dbo].[Forwarder] ([Id], [UserId], [Name], [Email]) VALUES (1, 3, N'Forwarder1', N'Forwarder1@timez.org')
INSERT [dbo].[Forwarder] ([Id], [UserId], [Name], [Email]) VALUES (2, 9, N'Forwarder2', N'Forwarder2@timez.org')
SET IDENTITY_INSERT [dbo].[Forwarder] OFF

INSERT [dbo].[ForwarderCity] ([CityId], [ForwarderId])
SELECT [Id] AS [CityId], 1 AS [ForwarderId]
FROM [dbo].[City]
WHERE [Id] < 8

INSERT [dbo].[ForwarderCity] ([CityId], [ForwarderId])
SELECT [Id] AS [CityId], 2 AS [ForwarderId]
FROM [dbo].[City]
WHERE [Id] >= 8


/****** Object:  Table [dbo].[Sender]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[Sender] ON
INSERT [dbo].[Sender] ([Id], [UserId], [Name], [Email], [Contact], [Address], [Phone]) VALUES 
(1, 4, N'Sender1', N'Sender1@timez.org', N'Contact_' + CAST(NEWID() AS NVARCHAR(50)), N'Address_' + CAST(NEWID() AS NVARCHAR(50)), N'Phone_' + CAST(NEWID() AS NVARCHAR(50))),
(2, 11, N'Sender2', N'Sender2@timez.org', N'Contact_' + CAST(NEWID() AS NVARCHAR(50)), N'Address_' + CAST(NEWID() AS NVARCHAR(50)), N'Phone_' + CAST(NEWID() AS NVARCHAR(50)))
SET IDENTITY_INSERT [dbo].[Sender] OFF

INSERT [dbo].[SenderCountry] ([CountryId], [SenderId])
SELECT [Id] AS [CountryId], 1 AS [SenderId]
FROM [dbo].[Country]
WHERE [Id] < 127

INSERT [dbo].[SenderCountry] ([CountryId], [SenderId])
SELECT [Id] AS [CountryId], 2 AS [SenderId]
FROM [dbo].[Country]
WHERE [Id] >= 127


/****** Object:  Table [dbo].[Client]    Script Date: 05/18/2013 14:17:27 ******/
SET IDENTITY_INSERT [dbo].[Client] ON
INSERT [dbo].[Client] 
([Id], [UserId], [Emails], [Nic], [LegalEntity], [Contacts], [Phone], [INN], [KPP], [OGRN], 
[Bank], [BIC], [LegalAddress], [MailingAddress], [RS], [KS], [TransitId], [ContractDate], [ContractNumber]) VALUES 
(1, 5, N'u1@timez.org, u12@timez.org; u13@timez.org', N'Nic 0', N'LegalEntity 0', NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), 1, GETUTCDATE(), 1),
(2, 6, N'u2@timez.org', N'Nic 1', N'LegalEntity 1', NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), 2, GETUTCDATE(), 2),
(3, 7, N'u3@timez.org', N'Nic 2', N'LegalEntity 2', NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), 3, GETUTCDATE(), 3),
(4, 8, N'u4@timez.org', N'Nic 3', N'LegalEntity 3', NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), 4, GETUTCDATE(), 4),
(5, 9, N'u5@timez.org', N'Nic 4', N'LegalEntity 4', NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), NEWID(), 5, GETUTCDATE(), 5)
SET IDENTITY_INSERT [dbo].[Client] OFF

INSERT [dbo].[AirWaybill] ([CreationTimestamp], [Bill], [ArrivalAirport], [DepartureAirport],
[DateOfDeparture], [DateOfArrival],[BrokerId], [GTD], [StateId], [CreatorUserId], [SenderUserId]) VALUES 
(SYSDATETIMEOFFSET(), CAST(NEWID() AS NVARCHAR(50)),CAST(NEWID() AS NVARCHAR(50)), CAST(NEWID() AS NVARCHAR(50)),
SYSDATETIMEOFFSET(), SYSDATETIMEOFFSET(), 1, CAST(NEWID() AS NVARCHAR(50)), 7, 1, NULL),
(SYSDATETIMEOFFSET(), CAST(NEWID() AS NVARCHAR(50)), N'ArrivalAirport', N'DepartureAirport',
SYSDATETIMEOFFSET(), SYSDATETIMEOFFSET(), 1, CAST(NEWID() AS NVARCHAR(50)), 7, 1, 4),
(SYSDATETIMEOFFSET(), CAST(NEWID() AS NVARCHAR(50)), N'ArrivalAirport', N'DepartureAirport',
SYSDATETIMEOFFSET(), SYSDATETIMEOFFSET(), 1, CAST(NEWID() AS NVARCHAR(50)), 7, 1, 4)

INSERT [dbo].[Application] 
([SenderId], [ForwarderId], [CreationTimestamp], [Invoice], [Characteristic], [AddressLoad], [WarehouseWorkingTime], [Weight], [Count], [Volume],
 [TermsOfDelivery], [StateChangeTimestamp], [StateId], [Value], [CurrencyId], [MethodOfDeliveryId], [ClientId], [TransitId], [AirWaybillId],
 [FactoryName], [FactoryPhone], [FactoryEmail], [MarkName], [CountryId], [DisplayNumber]) VALUES
(1, 1, CAST(0x073F7B288C421D370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 0, 0, 0, NEWID(), CAST(0x07D4DA298C421D370B0000 AS DateTimeOffset), 1, 1.0000, 2, 0, 1, 6, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 1, 1),
(1, 1, CAST(0x07E877338C421C370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 1, 1, 1, NEWID(), CAST(0x0755D3368C421C370B0000 AS DateTimeOffset), 2, 2.0000, 2, 1, 2, 7, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 2, 2),
(1, 1, CAST(0x07C9E4378C421B370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 2, 2, 2, NEWID(), CAST(0x070B81388C421B370B0000 AS DateTimeOffset), 3, 3.0000, 2, 0, 3, 8, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 3, 3),
(1, 1, CAST(0x076F6B398C421A370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 3, 3, 3, NEWID(), CAST(0x07A0E0398C421A370B0000 AS DateTimeOffset), 4, 4.0000, 2, 1, 4, 9, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 4, 4),
(1, 1, CAST(0x0704CB3A8C4219370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 4, 4, 4, NEWID(), CAST(0x0746673B8C4219370B0000 AS DateTimeOffset), 13, 5.0000, 2, 0, 5, 10, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 5, 5),
(1, 2, CAST(0x07992A3C8C4218370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 5, 0, 5, NEWID(), CAST(0x07AA513C8C421D370B0000 AS DateTimeOffset), 6, 6.0000, 2, 1, 1, 11, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 6, 6),
(1, 2, CAST(0x0770263E8C4217370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 6, 1, 6, NEWID(), CAST(0x0770263E8C421C370B0000 AS DateTimeOffset), 7, 7.0000, 2, 0, 2, 12, 1, 'f1', 'f1', 'f1@mail.ru', 'm1', 7, 7),
(1, 2, CAST(0x07C3E93E8C4216370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 7, 2, 7, NEWID(), CAST(0x07D4103F8C421B370B0000 AS DateTimeOffset), 8, 8.0000, 2, 1, 3, 13, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 8, 8),
(1, 2, CAST(0x0716AD3F8C4215370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 8, 3, 8, NEWID(), CAST(0x0727D43F8C421A370B0000 AS DateTimeOffset), 9, 9.0000, 2, 0, 4, 14, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 9, 9),
(2, 2, CAST(0x076970408C4214370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 9, 4, 9, NEWID(), CAST(0x077A97408C4219370B0000 AS DateTimeOffset), 10, 10.0000, 2, 1, 5, 15, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 10, 10),
(2, 2, CAST(0x07BC33418C421D370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 0, 0, 10, NEWID(), CAST(0x07CC5A418C421D370B0000 AS DateTimeOffset), 11, 11.0000, 2, 0, 1, 16, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 11, 11),
(2, 2, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NULL, NULL, NULL, 1, 1, 11, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 12, 12.0000, 2, 1, 2, 17, NULL, 'f1', 'f1', 'f1@mail.ru', 'm1', 12, 12),
(2, 2, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NEWID(), NEWID(), NEWID(), 1, 1, 1, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 7, 12.0000, 1, 1, 2, 17, 1, 'f2', 'f1', 'f1@mail.ru', 'm2', 13, 13),
(2, 2, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NEWID(), NEWID(), NEWID(), 1, 1, 1, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 7, 12.0000, 1, 1, 2, 17, 1, 'f2', 'f1', 'f1@mail.ru', 'm2', 14, 14),
(2, 1, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NEWID(), NEWID(), NEWID(), 1, 1, 1, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 7, 12.0000, 1, 1, 4, 17, 2, 'f2', 'f1', 'f1@mail.ru', 'm2', 15, 15),
(2, 1, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NEWID(), NEWID(), NEWID(), 1, 1, 1, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 7, 12.0000, 1, 1, 5, 17, 2, 'f2', 'f1', 'f1@mail.ru', 'm2', 16, 16),
(2, 1, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NEWID(), NEWID(), NEWID(), 1, 1, 1, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 7, 12.0000, 1, 1, 5, 17, 1, 'f2', 'f1', 'f1@mail.ru', 'm2', 17, 17),
(2, 1, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NEWID(), NEWID(), NEWID(), 1, 1, 1, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 7, 12.0000, 1, 1, 5, 17, 2, 'f2', 'f1', 'f1@mail.ru', 'm2', 18, 18),
(2, 1, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NEWID(), NEWID(), NEWID(), 1, 1, 1, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 7, 12.0000, 1, 1, 1, 17, 2, 'f2', 'f1', 'f1@mail.ru', 'm2', 19, 19),
(2, 1, CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), NEWID(), NEWID(), NEWID(), NEWID(), 1, 1, 1, NEWID(), CAST(0x070FF7418C421C370B0000 AS DateTimeOffset), 7, 12.0000, 1, 1, 1, 17, 3, 'f2', 'f1', 'f1@mail.ru', 'm2', 10, 20)
GO

UPDATE [dbo].[Application]
SET [SenderId] = 1
WHERE [SenderId] IS NULL

SET IDENTITY_INSERT [dbo].[EmailTemplate] ON 
INSERT [dbo].[EmailTemplate] ([Id]) VALUES
(1), (2), (3), (4), (5), (6), (7), (8), (9), (10),
(11),
(24), (25), (26), (27), (28), (29), (30), 
(31), (32), (33), (34), (35), (36), (37), (38)
SET IDENTITY_INSERT [dbo].[EmailTemplate] OFF


INSERT [dbo].[EventEmailTemplate]
([EventTypeId], [EmailTemplateId], [EnableEmailSend]) VALUES
-- Application events
(1, 1, 1), -- ApplicationCreated
(2, 10, 1), -- ApplicationSetState
(9, 6, 1),
(10, 7, 1),
(15, 28, 1), -- SetSender
(16, 29, 1), -- SetForwarder
(20, 32, 1),

-- Application's file events
(3, 2, 1),
(4, 4, 1),
(5, 5, 1),
(6, 8, 1),
(7, 3, 1),
(8, 9, 1),

-- Application's calculation events
(11, 24, 1), -- Calculate
(12, 25, 0), -- CalculationCanceled

-- Client events
(13, 26, 1), -- BalanceIncreased
(14, 27, 1), -- BalanceDecreased
(18, 30, 1),

-- Awb
(19, 31, 1), -- AwbCreated
(21, 33, 1), -- GTDFileUploaded
(22, 34, 1), -- GTDAdditionalFileUploaded
(23, 35, 1), -- AwbPackingFileUploaded
(24, 36, 1), -- AwbInvoiceFileUploaded
(25, 37, 1), -- AWBFileUploaded
(26, 38, 1), -- DrawFileUploaded
(27, 11, 1)  -- SetBroker


INSERT [dbo].[EmailTemplateLocalization]
([EmailTemplateId], [TwoLetterISOLanguageName], [Subject], [Body], [IsBodyHtml]) VALUES
(1, 'ru', N'Alicargo : Заявка #{DisplayNumber}', N'Создана новая заявка.
Номер заказа: {DisplayNumber}
{DateOfCargoReceipt [Предположительная дата получения: {0}]}
{FactoryName [Производитель: {0}]}
{FactoryEmail [Email фабрики: {0}]}
{FactoryPhone [Телефон фабрики: {0}]}
{FactoryContact [Контактное лицо фабрики: {0}]}
{DaysInWork [Дней в работе: {0}]}
{Invoice [Инвойс: {0}]}
{CreationTimestamp [Дата создания: {0}]}
{StateChangeTimestamp [Дата сметы статуса: {0}]}
{MarkName [Марка: {0}]}
{Count [Количество мест (коробки): {0}]}
{Volume [Объем (m3 ): {0}]}
{Weight [Вес (кг): {0}]}
{Characteristic [Характеристика товара: {0}]}
{Value [Стоимость: {0}]}
{AddressLoad [Адрес забора груза: {0}]}
{CountryName [Страна: {0}]}
{WarehouseWorkingTime [Время работы склада: {0}]}
{TermsOfDelivery [Условия поставки: {0}]}
{MethodOfDelivery [Способ доставки: {0}]}
{TransitReference [Транзитный референс: {0}]}

{SenderName [Отправитель: {0}]}
{SenderContact [Отправитель, контактное лицо: {0}]}
{SenderAddress [Отправитель, адрес: {0}]}
{SenderPhone [Отправитель, телефон: {0}]}
{SenderEmail [Отправитель, email: {0}]}

{CarrierName [Курьер: {0}]}
{CarrierContact [Курьер, контактное лицо: {0}]}
{CarrierAddress [Курьер, адрес: {0}]}
{CarrierPhone [Курьер, телефон: {0}]}
{CarrierEmail [Курьер, email: {0}]}

Транзит по России:
{TransitCity [Город: {0}]}
{TransitAddress [Адрес: {0}]}
{TransitRecipientName [Получатель: {0}]}
{TransitPhone [Телефон: {0}]}
{TransitWarehouseWorkingTime [Время работы склада: {0}]}
{MethodOfTransit [Способ транзита: {0}]}
{DeliveryType [Тип доставки: {0}]}

{AirWaybill [AWB: {0}]}
{AirWaybillDateOfDeparture [Дата вылета: {0}]}
{AirWaybillDateOfArrival [Дата прилета: {0}]}
{AirWaybillGTD [Номер ГТД: {0}]}', 0),

(1, 'en', N'Alicargo : Order#{DisplayNumber}', N'Created new order.
Number order: {DisplayNumber}
Client: {ClientNic}
Factory: {FactoryName}
Brands: {MarkName}
Created: {CreationTimestamp}', 0),

(1, 'it', N'Alicargo : Order#{DisplayNumber}', N'Created new order.
Number order: {DisplayNumber}
Client: {ClientNic}
Factory: {FactoryName}
Brands: {MarkName}
Created: {CreationTimestamp}', 0),

(2, 'ru', N'Alicargo : Заявка #{DisplayNumber}', N'Добрый день, {LegalEntity}
Изменение статуса заявки {DisplayNumber} - прикреплен документ Счет-фактура.
Просьба подписать и выслать почтой по адресу:
Россия - ООО "Трэйд Инвест"
107113 Москва, Сокольническая пл. 4а офис 309  

С уважением,
Alicargo  srl', 0),

(2, 'en', N'Alicargo : Order#{DisplayNumber}', N'Hello, {LegalEntity}
Changing the status of the application {DisplayNumber}. Commercial invoice is attached.
Please sign and send by mail to:
Russia - LLC "Trade Invest"
107113 Moscow, Sokolniki Sq. 4a office 309

Sincerely,
Alicargo  srl', 0),
 
(2, 'it', N'Alicargo : Order#{DisplayNumber}', N'Hello, {LegalEntity}
Changing the status of the application {DisplayNumber}. Commercial invoice is attached.
Please sign and send by mail to:
Russia - LLC "Trade Invest"
107113 Moscow, Sokolniki Sq. 4a office 309

Sincerely,
Alicargo  srl', 0),

(3, 'ru', N'Alicargo : Заявка #{DisplayNumber}', N'Изменение статуса заявки: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, добавлен счет за доставку.', 0),
(3, 'en', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, added due for delivery.', 0),
(3, 'it', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, added due for delivery.', 0),

(4, 'ru', N'Alicargo : Заявка #{DisplayNumber}', N'Изменение статуса заявки:  {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, добавлен инвойс {UploadedFile}.', 0),
(4, 'en', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, added invoice {UploadedFile}.', 0),
(4, 'it', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, added invoice {UploadedFile}.', 0),

(5, 'ru', N'Alicargo : Заявка #{DisplayNumber}', N'Изменение статуса заявки:  {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, добавлен пакинг {UploadedFile}.', 0),
(5, 'en', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, added packing {UploadedFile}.', 0),
(5, 'it', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, added packing {UploadedFile}.', 0),

(6, 'ru', N'Alicargo : Заявка #{DisplayNumber}', N'Предположительная дата получения — {DateOfCargoReceipt}.', 0),
(6, 'en', N'Alicargo : Order#{DisplayNumber}', N'Предположительная дата получения — {DateOfCargoReceipt}.', 0),
(6, 'it', N'Alicargo : Order#{DisplayNumber}', N'Предположительная дата получения — {DateOfCargoReceipt}.', 0),

(7, 'ru', N'Alicargo : Заявка #{DisplayNumber}', N'Изменение статуса заявки: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}. Задан транзитный референс {TransitReference}.', 0),
(7, 'en', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}. Specified transit reference {TransitReference}.', 0),
(7, 'it', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}. Specified transit reference {TransitReference}.', 0),

(8, 'ru', N'Alicargo : Order#{DisplayNumber}', N'Изменение статуса заявки: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, добавлен swift {UploadedFile}.', 0),
(8, 'en', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, added a swift {UploadedFile}.', 0),
(8, 'it', N'Alicargo : Order#{DisplayNumber}', N'Changing the status of the application: {DisplayNumber}, {FactoryName}, {MarkName}, {Invoice}, added a swift {UploadedFile}.', 0),

(9, 'ru', N'Alicargo : Заявка #{DisplayNumber}', N'Добрый день, {LegalEntity}
Изменение статуса заявки {DisplayNumber} - прикреплен документ ТОРГ-12.
Просьба подписать и выслать почтой по адресу:
Россия - ООО "Трэйд Инвест"
107113 Москва, Сокольническая пл. 4а офис 309

С уважением,
Alicargo  srl', 0),

(9, 'en', N'Alicargo : Order#{DisplayNumber}', N'Hello, {LegalEntity}
Changing the status of the application {DisplayNumber}. TORG-12 is attached.
Please sign and send by mail to:
Russia - LLC "Trade Invest"
107113 Moscow, Sokolniki Sq. 4a office 309

Sincerely,
Alicargo  srl', 0),

(9, 'it', N'Alicargo : Order#{DisplayNumber}', N'Hello, {LegalEntity}
Changing the status of the application {DisplayNumber}. TORG-12 is attached.
Please sign and send by mail to:
Russia - LLC "Trade Invest"
107113 Moscow, Sokolniki Sq. 4a office 309

Sincerely,
Alicargo  srl', 0),

(10, 'ru', N'Alicargo : Заявка #{DisplayNumber}', 
N'Изменение статуса заявки: {StateName}
Номер заказа: {DisplayNumber}
{DateOfCargoReceipt [Предположительная дата получения: {0}]}
{FactoryName [Производитель: {0}]}
{FactoryEmail [Email фабрики: {0}]}
{FactoryPhone [Телефон фабрики: {0}]}
{FactoryContact [Контактное лицо фабрики: {0}]}
{DaysInWork [Дней в работе: {0}]}
{Invoice [Инвойс: {0}]}
{CreationTimestamp [Дата создания: {0}]}
{StateChangeTimestamp [Дата сметы статуса: {0}]}
{MarkName [Марка: {0}]}
{Count [Количество мест (коробки): {0}]}
{Volume [Объем (m3 ): {0}]}
{Weight [Вес (кг): {0}]}
{Characteristic [Характеристика товара: {0}]}
{Value [Стоимость: {0}]}
{AddressLoad [Адрес забора груза: {0}]}
{CountryName [Страна: {0}]}
{WarehouseWorkingTime [Время работы склада: {0}]}
{TermsOfDelivery [Условия поставки: {0}]}
{MethodOfDelivery [Способ доставки: {0}]}
{TransitReference [Транзитный референс: {0}]}

{SenderName [Отправитель: {0}]}
{SenderContact [Отправитель, контактное лицо: {0}]}
{SenderAddress [Отправитель, адрес: {0}]}
{SenderPhone [Отправитель, телефон: {0}]}
{SenderEmail [Отправитель, email: {0}]}

{CarrierName [Курьер: {0}]}
{CarrierContact [Курьер, контактное лицо: {0}]}
{CarrierAddress [Курьер, адрес: {0}]}
{CarrierPhone [Курьер, телефон: {0}]}
{CarrierEmail [Курьер, email: {0}]}

Транзит по России:
{TransitCity [Город: {0}]}
{TransitAddress [Адрес: {0}]}
{TransitRecipientName [Получатель: {0}]}
{TransitPhone [Телефон: {0}]}
{TransitWarehouseWorkingTime [Время работы склада: {0}]}
{MethodOfTransit [Способ транзита: {0}]}
{DeliveryType [Тип доставки: {0}]}

{AirWaybill [AWB: {0}]}
{AirWaybillDateOfDeparture [Дата вылета: {0}]}
{AirWaybillDateOfArrival [Дата прилета: {0}]}
{AirWaybillGTD [Номер ГТД: {0}]}', 0),
(10, 'en', N'Alicargo : Order#{DisplayNumber}', N'State is changed: {StateName}', 0),
(10, 'it', N'Alicargo : Order#{DisplayNumber}', N'State is changed: {StateName}', 0),

(11, 'ru', N'Создана авианакладная',
N'Номер накладной: {AirWaybill}.
Дата вылета: {DateOfDeparture}.
Дата прилета: {DateOfArrival}.
Аэропорт вылета: {DepartureAirport}.
Аэропорт прилета: {ArrivalAirport}.
Количество мест: {TotalCount}.
Общий вес {TotalWeight}.', 0),

-- calculate
(24, 'ru', 
N'Расчет стоимости заявки {ApplicationDisplay}',
N'Расчет стоимости заявки {ApplicationDisplay}.
Сальдо: {ClientBalance}€ ({CalculationTimestamp}).

{AirWaybillDisplay}

{Weight} kg * {TariffPerKg}€ = {WeightCost}€
скотч - {ScotchCost}€
страховка - {InsuranceCost}€
фактура - {FactureCost}€
доставка - {TransitCost}€
забор с фабрики - {PickupCost}€

Итого - {TotalCost}€', 0),
(25, 'ru', NULL, NULL, 0),
-- balnce
(26, 'ru', N'Поступление денежных средств {ClientNic}',
N'Поступление денежных средств: {Money}€{Comment [ ({0}).]} 
Сальдо: {ClientBalance}€ ({Timestamp}).', 0),
(27, 'ru', N'Списание денежных средств {ClientNic}',
N'Списание денежных средств: {Money}€{Comment [ ({0}).]} 
Сальдо: {ClientBalance}€ ({Timestamp}).', 0),

(28, 'ru', N'Установлен отправитель {SenderName} на заявку {DisplayNumber}',
N'Установлен отправитель {SenderName} на заявку {DisplayNumber}', 0),

(29, 'ru', N'Установлен перевозчик {ForwarderName} на заявку {DisplayNumber}',
N'Установлен перевозчик {ForwarderName} на заявку {DisplayNumber}', 0),

(30, 'ru', N'Alicargo',
N'Добрый день, {ClientNic}! Вы зарегистрированны в системе отслеживания грузов компании Alicargo. Имя доступа: {Login}, Пароль: {Password}.', 0),

(31, 'ru', N'Alicargo',
N'Создана авианакладная. Номер накладной: {AirWaybill}.
Аэропорт вылета: {DepartureAirport}/{DateOfDeparture}.
Аэропорт прилета: {ArrivalAirport}/{DateOfArrival}.
Вес: {TotalWeight}.
Количество мест: {TotalCount}.', 0),

(32, 'ru', N'Alicargo',
N'Заявке {DisplayNumber} задана авианакладная, Аэропорт вылета: {DepartureAirport}/{DateOfDeparture}, Аэропорт прилета: {ArrivalAirport}/{DateOfArrival}, Вес: {TotalWeight}, Количество мест: {TotalCount}. Номер накладной: {AirWaybill}.', 0),

(33, 'ru', N'Alicargo', N'Изменение статуса  AWB: Номер авиа-накладной {AirWaybill}, «добавлен ГТД»', 0),
(33, 'en', N'Alicargo', N'Changing the status of AWB: air waybill number {AirWaybill}, "added GTD"', 0),

(34, 'ru', N'Alicargo', N'Изменение статуса  AWB: Номер авиа-накладной {AirWaybill}, «добавлен ГТД-дополнение»', 0),
(34, 'en', N'Alicargo', N'Changing the status of AWB: air waybill number {AirWaybill}, "added the GTD-complement"', 0),

(35, 'ru', N'Alicargo', N'Изменение статуса  AWB: Номер авиа-накладной {AirWaybill}, «добавлен пакинг-лист»', 0),
(35, 'en', N'Alicargo', N'Changing the status of AWB: air waybill number {AirWaybill}, "added paking-list"', 0),

(36, 'ru', N'Alicargo', N'Изменение статуса  AWB: Номер авиа-накладной {AirWaybill}, «добавлен инвойс»', 0),
(36, 'en', N'Alicargo', N'Changing the status of AWB: air waybill number {AirWaybill}, "added invoice"', 0),

(37, 'ru', N'Alicargo', N'Изменение статуса  AWB: Номер авиа-накладной {AirWaybill}, добавлена авиа-накладная', 0),
(37, 'en', N'Alicargo', N'Changing the status of AWB: air waybill number {AirWaybill}, added air waybill', 0),

(38, 'ru', N'Alicargo', N'Изменение статуса  AWB: Номер авиа-накладной {AirWaybill}, добавлен Draw', 0),
(38, 'en', N'Alicargo', N'Changing the status of AWB: air waybill number {AirWaybill}, added Draw', 0)


INSERT [dbo].[EventEmailRecipient]
([RoleId], [EventTypeId]) VALUES
-- Admin 1
(1, 1),
(1, 2),
(1, 3),
(1, 8),
(1, 11),
(1, 13),
(1, 14),
(1, 15),
(1, 16),
(1, 18),
(1, 19),
(1, 20),
(1, 21),
(1, 22),
(1, 24),
(1, 25),
(1, 26),
-- Sender 2
(2, 1),
(2, 4),
(2, 5),
(2, 6),
(2, 15),
(2, 24),
(2, 25),
-- Broker 3
(3, 23),
(3, 25),
(3, 26),
(3, 27),
-- Forwarder 4
(4, 2),
(4, 16),
(4, 20),
(4, 27),
-- Client 5
(5, 1),
(5, 2),
(5, 3),
(5, 4),
(5, 5),
(5, 6),
(5, 7),
(5, 8),
(5, 9),
(5, 10),
(5, 11),
(5, 13),
(5, 14),
(5, 15),
(5, 16),
(5, 18),
(5, 21),
(5, 22),
(5, 27),
-- Carrier
(6, 2)

INSERT [dbo].[Setting] ([Type], [Data]) VALUES
(1, 0xEFBBBF7B2242616E6B223A22D090D09AD091205C22D0A0D09ED0A1D095D092D0A0D09ED091D090D09DD09A5C222028D09ED090D09E2920D0932E20D09CD09ED0A1D09AD092D090222C22424943223A22303434353835373737222C22436F72726573706F6E64656E744163636F756E74223A223330313031383130383030303030303030373737222C2254494E223A2237373138393533383230222C22546178526567697374726174696F6E526561736F6E436F6465223A22373731383031303031222C2243757272656E744163636F756E74223A223430373032383130393030303030333430333430222C225061796565223A22D0A2D180D18DD0B9D0B420D098D0BDD0B2D0B5D181D18220D09ED09ED09E222C2253686970706572223A22D0A2D180D18DD0B9D0B420D098D0BDD0B2D0B5D181D18220D09ED09ED09E2C20D098D09DD09D20373731383935333832302C20D09AD09FD09F203737313830313030312C203130373131332C20D09CD0BED181D0BAD0B2D0B020D0B32C20D0A1D0BED0BAD0BED0BBD18CD0BDD0B8D187D0B5D181D0BAD0B0D18F20D0BFD0BBD0BED189D0B0D0B4D18C2C20D0B4D0BED0BC20E2849620342C20D0BAD0BED180D0BFD183D18120612C20D0BED184D0B8D181203330392C20D182D0B5D0BB2E3A203838303035353538353233222C2248656164223A22D09DD0B0D0B4D0B8D0BD20D0AF2ED09D2E222C224163636F756E74616E74223A22D09DD0B0D0B4D0B8D0BD20D0AF2ED09D2E222C2248656164657254657874223A22D092D0BDD0B8D0BCD0B0D0BDD0B8D0B52120D09ED0BFD0BBD0B0D182D0B020D0B4D0B0D0BDD0BDD0BED0B3D0BE20D181D187D0B5D182D0B020D0BED0B7D0BDD0B0D187D0B0D0B5D18220D181D0BED0B3D0BBD0B0D181D0B8D0B520D18120D183D181D0BBD0BED0B2D0B8D18FD0BCD0B820D0BFD0BED181D182D0B0D0B2D0BAD0B820D182D0BED0B2D0B0D180D0B02E20D0A3D0B2D0B5D0B4D0BED0BCD0BBD0B5D0BDD0B8D0B520D0BED0B120D0BED0BFD0BBD0B0D182D0B520D0BED0B1D18FD0B7D0B0D182D0B5D0BBD18CD0BDD0BE2C20D0B220D0BFD180D0BED182D0B8D0B2D0BDD0BED0BC20D181D0BBD183D187D0B0D0B520D0BDD0B520D0B3D0B0D180D0B0D0BDD182D0B8D180D183D0B5D182D181D18F20D0BDD0B0D0BBD0B8D187D0B8D0B520D182D0BED0B2D0B0D180D0B020D0BDD0B020D181D0BAD0BBD0B0D0B4D0B52E20D0A2D0BED0B2D0B0D18020D0BED182D0BFD183D181D0BAD0B0D0B5D182D181D18F20D0BFD0BE20D184D0B0D0BAD182D18320D0BFD180D0B8D185D0BED0B4D0B020D0B4D0B5D0BDD0B5D0B320D0BDD0B020D1802FD18120D09FD0BED181D182D0B0D0B2D189D0B8D0BAD0B02C20D181D0B0D0BCD0BED0B2D18BD0B2D0BED0B7D0BED0BC2C20D0BFD180D0B820D0BDD0B0D0BBD0B8D187D0B8D0B820D0B4D0BED0B2D0B5D180D0B5D0BDD0BDD0BED181D182D0B820D0B820D0BFD0B0D181D0BFD0BED180D182D0B02E222C22564154223A302E31382C224575726F546F5275626C65223A34372E353637342C224175746F557064617465506572696F64223A2230313A30303A3030222C22536F7572636555726C223A22687474703A2F2F6578706F72742E7262632E72752F667265652F63622E302F667265652E666367693F706572696F643D4441494C59267469636B6572733D455552266C617374646179733D3026736570617261746F723D3B26646174615F666F726D61743D42524F57534552266865616465723D30227D)
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO